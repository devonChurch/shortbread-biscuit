{"version":3,"sources":["types.ts","styled.tsx","redux/reducers/select.ts","statics.ts","Progress.tsx","helpers.tsx","redux/reducers/lottoData.ts","redux/reducers/rangeData.ts","redux/reducers/combinations.ts","redux/reducers/index.ts","redux/actions.ts","redux/sagas.ts","redux/store.ts","Section.tsx","Ball.tsx","Balls.tsx","Select.tsx","Skeleton.tsx","Time.tsx","Statistic.tsx","Draw.tsx","Combinations.tsx","Associations.tsx","Prediction.tsx","App.tsx","index.tsx"],"names":["EReduxActions","ELottoJsonKeys","styled","default","createGlobalStyle","css","keyframes","ThemeProvider","initialState","currentBalls","colors","dateFormat","Container","div","_templateObject","Divider","_templateObject2","CombinationsProgress","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","compareData","getFrequencies","createAssociations","createCombinations","inherits","createClass","key","value","_this$state","react_default","a","createElement","es_progress","percent","Math","ceil","status","props","objectSpread","Component","fetchCsvData","axios","method","url","createArrayOfLength","fill","createListFromTo","from","to","map","_","index","getBallColor","ball","json","columns","max","createColor","shell","reduce","acc","defineProperty","ballObj","accFreq","row","accCol","column","frequencyObj","entries","_ref","_ref2","slicedToArray","frequency","balls","toConsumableArray","reverse","_ref3","_ref4","enrichJsonData","csvJson","_ref6","position1","position2","position3","position4","position5","position6","drawNum","Draw","bonusBall1","bonusBall2","powerBall","drawDate","drawTime","Date","getTime","convertLottoCsvDataToJson","_ref7","asyncToGenerator","regenerator_default","mark","_callee","rawCsvData","wrap","_context","prev","next","csvToJson","fromString","sent","abrupt","stop","_x","enrichAssociationsWithColor","associations","association","_ref12","_ref13","createDrawItem","_ref15","createDrawData","table","increment","segments","segment","draws","totalDraws","push","title","updateCombinationsNotification","progress","undefined","duration","notification","open","message","description","Progress_CombinationsProgress","createCombinationsWorkerSequence","rangeDataAll","worker","Worker","throttled","throttle","calculation","Promise","resolve","onmessage","event","combinationsData","_event$data","data","isComplete","combinations","cancel","_ref8","total","_ref9","matches","_ref10","postMessage","createErrorNotification","error","lottoDataAll","lottoDataTotalItems","lottoDataOldestDate","lottoDataNewestDate","lottoDataIsFetching","rangeDataTotalItems","rangeDataBaseBalls","rangeDataPowerBalls","rangeDataDraws","rangeDataOldest","rangeDataNewest","combinationAssociations","combinationsIsCalculating","combineReducers","lottoData","action","type","actions","LOTTO_DATA_SAVE_ALL","payload","_extractDateBoundsFro","oldest","slice","newest","rangeData","RANGE_DATA_UPDATE","_action$payload","_extractRangeDataFrom","jsonAll","filter","_ref5","sliceItemsByTime","baseBalls","frequencies","powerBalls","extractRangeDataFromLottoData","COMBINATIONS_UPDATE","COMBINATIONS_CALCULATE","select","SELECT_TOGGLE","prevBalls","toggledBall","nextBalls","includes","prevItem","SELECT_CLEAR","lottoDataSaveAll","rangeDataUpdateBase","combinationsCalculate","combinationsUpdate","lottoDataAllFetchSaga","combinationsCalculateSaga","sagas","response","put","t0","_marked","_context2","_marked2","_context3","takeLatest","LOTTO_DATA_FETCH","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","run","section","Section_templateObject","background","Heading","h2","Section_templateObject2","Grid","_templateObject3","minCard","maxCard","Section","children","Section_Container","Detail","Ball_templateObject","Button","Ball_templateObject2","color","isActive","darken","rgba","onClick","Boolean","Ball","handleClick","_this$props","_this$props2","_this$props2$isActive","as","PureComponent","Balls_templateObject","BallsList","Balls_templateObject2","BallsStack","Balls_templateObject3","_templateObject4","BallsGroup","_templateObject5","BallsModule","_templateObject6","BallsCombination","_templateObject7","BallsAssociation","_templateObject8","BallsDraw","_templateObject9","_templateObject10","BallsFrequecy","_templateObject11","optionsList","Select","handleToggle","handleClear","checkIsActive","card","style","height","es_button","icon","size","position","right","top","Balls","join","src_Ball","SkeletonBlob","isInline","className","display","width","margin","SkeletonInput","Skeleton_SkeletonBlob","SkeletonCard","_ref2$totalColumns","totalColumns","_ref2$totalRows","totalRows","_ref2$totalCells","totalCells","_ref2$isTitleHidden","isTitleHidden","maxWidth","gridTemplateColumns","gridRowGap","columnIndex","rowIndex","justifyContent","cellIndex","SkeletonBaseBalls","Skeleton_SkeletonCard","SkeletonCombinations","SkeletonAssociations","SkeletonPowerBalls","SkeletonDraws","moize","reactSimple","absoluteOldestDate","absoluteNewestDate","currentOldestDate","currentNewestDate","handleChange","totalCurrentDraws","totalPossibleDraws","isLoading","react","date_picker","RangePicker","defaultValue","moment","format","onChange","es_alert","showIcon","Skeleton_SkeletonInput","Statistic","Combinations","Associations","output","Prediction","App","checkIsCurrentBallActive","isEmpty","updateFromToDates","oldestString","newestString","valueOf","lottoDataFetch","_this2","selectToggle","selectClear","minHeight","src_Section","src_Select","src_Time","src_Prediction","Skeleton_SkeletonBaseBalls","src_Statistic","Skeleton_SkeletonCombinations","src_Combinations","Skeleton_SkeletonAssociations","src_Associations","Skeleton_SkeletonPowerBalls","Skeleton_SkeletonDraws","src_Draw","mapDispatchToProps","ballNum","connect","GlobalStyles","src_templateObject","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f8dfb149.chunk.js","sourcesContent":["export interface IReduxLottoDataState {\n  lottoDataAll: ILottoDataJson[];\n  lottoDataTotalItems: number;\n  //\n  lottoDataOldestDate: number; // Milliseconds.\n  lottoDataNewestDate: number; // Milliseconds.\n  //\n  lottoDataIsFetching: boolean;\n}\n\nexport interface IReduxRangeDataState {\n  rangeDataAll: ILottoDataJson[];\n  rangeDataTotalItems: number;\n  //\n  rangeDataBaseBalls: IBallData[];\n  rangeDataPowerBalls: IBallData[];\n  rangeDataDraws: IDrawData[];\n  //\n  rangeDataOldest: number; // Milliseconds.\n  rangeDataNewest: number; // Milliseconds.\n}\n\nexport interface IReduxCombinationsState {\n  combinationsData: IComboData[];\n  combinationAssociations: TAssociationData[];\n  combinationsIsCalculating: boolean;\n}\n\nexport interface IReduxSelectState {\n  currentBalls: number[];\n}\n\nexport interface IReduxCompleteState {\n  lottoData: IReduxLottoDataState;\n  rangeData: IReduxRangeDataState;\n  combinations: IReduxCombinationsState;\n  select: IReduxSelectState;\n}\n\nexport enum EReduxActions {\n  LOTTO_DATA_FETCH = \"LOTTO_DATA_FETCH\",\n  LOTTO_DATA_SAVE_ALL = \"LOTTO_DATA_SAVE_ALL\",\n  //\n  RANGE_DATA_UPDATE = \"RANGE_DATA_UPDATE\",\n  //\n  SELECT_TOGGLE = \"SELECT_TOGGLE\",\n  SELECT_CLEAR = \"SELECT_CLEAR\",\n  //\n  COMBINATIONS_CALCULATE = \"COMBINATIONS_CALCULATE\",\n  COMBINATIONS_UPDATE = \"COMBINATIONS_UPDATE\"\n}\n\nexport interface IBallFrequency {\n  frequency: number;\n  balls: [\n    number, // Ball.\n    string //  Color.\n  ][];\n}\n\nexport interface IBallData {\n  title: string;\n  frequencies: IBallFrequency[];\n}\n\nexport interface ILottoDataCsv {\n  1: string;\n  2: string;\n  3: string;\n  4: string;\n  5: string;\n  6: string;\n  Draw: string;\n  \"Bonus Ball\": string;\n  \"2nd Bonus Ball\": string;\n  \"Power Ball\": string;\n  \"Draw Date\": string;\n}\n\nexport interface ILottoDataJson {\n  position1: number;\n  position2: number;\n  position3: number;\n  position4: number;\n  position5: number;\n  position6: number;\n  bonusBall1: number;\n  bonusBall2: number;\n  powerBall: number;\n  drawNum: number;\n  drawDate: string;\n  drawTime: number;\n}\n\nexport enum ELottoJsonKeys {\n  position1 = \"position1\",\n  position2 = \"position2\",\n  position3 = \"position3\",\n  position4 = \"position4\",\n  position5 = \"position5\",\n  position6 = \"position6\",\n  bonusBall1 = \"bonusBall1\",\n  bonusBall2 = \"bonusBall2\",\n  powerBall = \"powerBall\",\n  drawNum = \"drawNum\",\n  drawDate = \"drawDate\",\n  drawTime = \"drawTime\"\n}\n\nexport interface ICombinations {\n  frequency: number;\n  matches: [\n    number, // Ball.\n    string // Color.\n  ][][];\n}\n\nexport interface IComboData {\n  title: string;\n  total: number;\n  combinations: ICombinations[];\n}\n\nexport type TAssociationData = {\n  frequency: number;\n  balls: [\n    number, // Ball.\n    string // Color.\n  ][];\n}[];\n\nexport interface IDrawItem {\n  drawNum: number;\n  balls: [\n    number, // Ball.\n    string // Color.\n  ][];\n}\n\nexport interface IDrawData {\n  title: string;\n  draws: IDrawItem[];\n}\n\nexport interface IPredictionData {\n  input: number[][];\n  output: number[];\n}\n\nexport type TPrediction = [\n  number, // Ball.\n  string //  Color.\n][];\n","// styled-components.ts\nimport * as styledComponents from \"styled-components\";\n\ninterface ITheme {}\n\nconst {\n  default: styled,\n  css,\n  createGlobalStyle,\n  keyframes,\n  ThemeProvider\n} = styledComponents as styledComponents.ThemedStyledComponentsModule<ITheme>;\n\nexport { css, createGlobalStyle, keyframes, ThemeProvider };\nexport default styled;\n","import {\n  IReduxSelectState as IState,\n  EReduxActions as actions\n} from \"../../types\";\n\ninterface IAction {\n  type: actions.SELECT_TOGGLE | actions.SELECT_CLEAR;\n  payload: number;\n}\n\nconst initialState = {\n  currentBalls: []\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.SELECT_TOGGLE: {\n      const prevBalls = state.currentBalls;\n      const toggledBall = action.payload;\n      const isAlreadyActive = prevBalls.includes(toggledBall);\n      const nextBalls = isAlreadyActive\n        ? prevBalls.filter(prevItem => prevItem !== toggledBall)\n        : [...prevBalls, toggledBall];\n\n      return {\n        ...state,\n        currentBalls: nextBalls\n      };\n    }\n    case actions.SELECT_CLEAR: {\n      return {\n        ...state,\n        currentBalls: []\n      };\n    }\n    default:\n      return state;\n  }\n}\n","export const colors = {\n  // Balls.\n  ballPurple: \"#6200EA\",\n  ballRed: \"#E53935\",\n  ballGreen: \"#00BFA5\",\n  ballOrange: \"#FF6D00\",\n  ballBlue: \"#2962FF\",\n  ballPower: \"#607D8B\",\n  // Background.\n  bgDark: \"#001529\",\n  bgLight: \"#f0f2f5\",\n  bg100: \"#CFD8DC\",\n  bg200: \"#B0BEC5\",\n  bg300: \"#90A4AE\",\n  bg400: \"#78909C\",\n  bg500: \"#607D8B\",\n  bg600: \"#546E7A\",\n  bg700: \"#455A64\",\n  bg800: \"#37474F\",\n  bg900: \"#263238\",\n  // misc\n  none: \"transparent\"\n};\n\nexport const dateFormat = \"YYYY/MM/DD\";\n","import React, { Component } from \"react\";\nimport { Progress } from \"antd\";\nimport styled from \"./styled\";\nimport { colors } from \"./statics\";\n\nconst Container = styled.div`\n  display: grid;\n  grid-row-gap: 12px;\n`;\n\nconst Divider = styled.div`\n  background: ${colors.bgLight};\n  border: 2px solid ${colors.bg200};\n  padding: 12px;\n\n  .ant-progress-inner {\n    background: white;\n  }\n`;\n\ninterface IProps {\n  compareData?: number;\n  getFrequencies?: number;\n  createAssociations?: number;\n  createCombinations?: number;\n}\n\ninterface IState {\n  compareData: number;\n  getFrequencies: number;\n  createAssociations: number;\n  createCombinations: number;\n}\n\nexport class CombinationsProgress extends Component<IProps, IState> {\n  state: IState = {\n    compareData: 0,\n    getFrequencies: 0,\n    createAssociations: 0,\n    createCombinations: 0\n  };\n\n  static getDerivedStateFromProps(props: IProps, state: IState) {\n    return {\n      ...state,\n      ...props\n    };\n  }\n\n  render() {\n    const {\n      compareData,\n      getFrequencies,\n      createAssociations,\n      createCombinations\n    } = this.state;\n\n    return (\n      <Container>\n        <Divider>\n          <h4>Comparing Data</h4>\n          <Progress percent={Math.ceil(compareData)} status=\"active\" />\n        </Divider>\n        <Divider>\n          <h4>Calculating Frequencies</h4>\n          <Progress percent={Math.ceil(getFrequencies)} status=\"active\" />\n        </Divider>\n        <Divider>\n          <h4>Creating Associations</h4>\n          <Progress percent={Math.ceil(createAssociations)} status=\"active\" />\n        </Divider>\n        <Divider>\n          <h4>Creating Combinations</h4>\n          <Progress percent={Math.ceil(createCombinations)} status=\"active\" />\n        </Divider>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\nimport csvToJson from \"csvtojson\";\nimport throttle from \"lodash.throttle\";\nimport {\n  IBallFrequency,\n  IBallData,\n  ILottoDataCsv,\n  ILottoDataJson,\n  ELottoJsonKeys,\n  IComboData,\n  TAssociationData,\n  IDrawItem,\n  IDrawData\n} from \"./types\";\nimport { colors } from \"./statics\";\nimport { CombinationsProgress } from \"./Progress\";\n\nexport const fetchCsvData = () =>\n  axios({\n    method: \"get\",\n    url: \"lotto-numbers.csv\"\n  });\n\nexport const createArrayOfLength = (length: number) =>\n  new Array(length).fill(0);\n\nexport const getTimeNow = () => new Date().getTime();\n\nexport const createListFromTo = (from: number, to: number): number[] =>\n  new Array(to - from + 1).fill(0).map((_, index) => from + index);\n\nexport const getBallColor = (ball: number): string => {\n  switch (true) {\n    case ball >= 40:\n      return colors.ballPurple;\n    case ball >= 30:\n      return colors.ballRed;\n    case ball >= 20:\n      return colors.ballGreen;\n    case ball >= 10:\n      return colors.ballOrange;\n    default:\n      return colors.ballBlue;\n  }\n};\n\nexport const getFrequencies = (\n  json: ILottoDataJson[],\n  columns: ELottoJsonKeys[],\n  max: number,\n  createColor: (ball: number) => string\n): IBallFrequency[] => {\n  const shell = new Array(max)\n    .fill(0)\n    .reduce((acc, _, index) => ({ ...acc, [`${index + 1}`]: 0 }), {});\n\n  const ballObj: {\n    [key: string]: number;\n  } = json.reduce((accFreq, row) => {\n    return columns.reduce((accCol, column) => {\n      const ball = row[column];\n      return {\n        ...accCol,\n        [ball]: accCol[ball] + 1\n      };\n    }, accFreq);\n  }, shell);\n\n  const frequencyObj = Object.entries(ballObj).reduce(\n    (acc, [ball, frequency]) => {\n      const balls = acc[frequency + 1];\n\n      return {\n        ...acc,\n        [frequency + 1]: [...(balls || []), [+ball, createColor(+ball)]]\n      };\n    },\n    {} as {\n      [key: string]: IBallFrequency[\"balls\"];\n    }\n  );\n\n  return Object.entries(frequencyObj)\n    .reverse()\n    .map(([frequency, balls]) => ({\n      frequency: +frequency,\n      balls\n    }));\n};\n\nexport const sliceItemsByTime = (\n  json: ILottoDataJson[],\n  rangeDataOldest: number,\n  rangeDataNewest: number\n): ILottoDataJson[] =>\n  json.filter(\n    ({ drawTime }) => drawTime >= rangeDataOldest && drawTime <= rangeDataNewest\n  );\n\nexport const enrichJsonData = (csvJson: ILottoDataCsv[]): ILottoDataJson[] =>\n  csvJson.map(\n    ({\n      1: position1, //                 \"33\"\n      2: position2, //                 \"15\"\n      3: position3, //                 \"11\"\n      4: position4, //                 \"2\"\n      5: position5, //                 \"35\"\n      6: position6, //                 \"10\"\n      Draw: drawNum, //                \"1816\"\n      \"Bonus Ball\": bonusBall1, //     \"5\"\n      \"2nd Bonus Ball\": bonusBall2, // \"\"\n      \"Power Ball\": powerBall, //      \"8\"\n      \"Draw Date\": drawDate //         \"Saturday 29 December 2018\"\n    }) => ({\n      position1: +position1,\n      position2: +position2,\n      position3: +position3,\n      position4: +position4,\n      position5: +position5,\n      position6: +position6,\n      bonusBall1: +bonusBall1,\n      bonusBall2: +bonusBall2,\n      powerBall: +powerBall,\n      drawNum: +drawNum,\n      drawDate,\n      drawTime: new Date(drawDate).getTime()\n    })\n  );\n\nexport const convertLottoCsvDataToJson = async (\n  rawCsvData: string\n): Promise<ILottoDataJson[]> => {\n  const csvJson = await csvToJson().fromString(rawCsvData);\n\n  return enrichJsonData(csvJson);\n};\n\nexport const extractDateBoundsFromLottoData = (\n  lottoData: ILottoDataJson[]\n) => ({\n  oldest: lottoData.slice(-1)[0].drawTime,\n  newest: lottoData[0].drawTime\n});\n\nexport const extractRangeDataFromLottoData = (\n  jsonAll: ILottoDataJson[],\n  rangeDataOldest: number,\n  rangeDataNewest: number\n): {\n  rangeData: ILottoDataJson[];\n  baseBalls: IBallData[];\n  powerBalls: IBallData[];\n  rangeDataDraws: IDrawData[];\n} => {\n  const rangeData = sliceItemsByTime(jsonAll, rangeDataOldest, rangeDataNewest);\n  const rangeDataDraws = createDrawData(rangeData);\n  const {\n    position1,\n    position2,\n    position3,\n    position4,\n    position5,\n    position6,\n    bonusBall1,\n    powerBall\n  } = ELottoJsonKeys;\n  // prettier-ignore\n  const baseBalls = [\n    {title: 'Most Frequent', frequencies: getFrequencies(rangeData, [position1, position1, position2, position3, position4, position5, position6, bonusBall1], 40, getBallColor) },\n    {title: 'Ball One', frequencies: getFrequencies(rangeData, [position1], 40, getBallColor) },\n    {title: 'Ball Two', frequencies: getFrequencies(rangeData, [position2], 40, getBallColor) },\n    {title: 'Ball Three', frequencies: getFrequencies(rangeData, [position3], 40, getBallColor) },\n    {title: 'Ball Four', frequencies: getFrequencies(rangeData, [position4], 40, getBallColor) },\n    {title: 'Ball Five', frequencies: getFrequencies(rangeData, [position5], 40, getBallColor) },\n    {title: 'Ball Six', frequencies: getFrequencies(rangeData, [position6], 40, getBallColor) },\n    {title: 'Bonus Ball', frequencies: getFrequencies(rangeData, [bonusBall1], 40, getBallColor) },\n  ];\n  // prettier-ignore\n  const powerBalls = [\n    {title: 'Power Ball', frequencies: getFrequencies(rangeData, [powerBall], 10, () => colors.ballPower) }\n  ];\n\n  return {\n    rangeData,\n    baseBalls,\n    powerBalls,\n    rangeDataDraws\n  };\n};\n\nexport const enrichCombinationsWithColor = (\n  combinationsData: IComboData[]\n): IComboData[] =>\n  combinationsData.map(({ title, total, combinations }) => ({\n    title,\n    total,\n    combinations: combinations.map(({ frequency, matches }) => ({\n      frequency,\n      matches: matches.map(balls =>\n        balls.map(([ball]): [number, string] => [ball, getBallColor(ball)])\n      )\n    }))\n  }));\n\n// export const enrichCombinationsWithColor = (\n//   combinationsData: IComboData[]\n// ): IComboData[] =>\n//   combinationsData.map(({ title, combinations }) => ({\n//     title,\n//     combinations: combinations.map(({ frequency, balls }) => ({\n//       frequency,\n//       balls: balls.map(([ball]): [number, string] => [ball, getBallColor(ball)])\n//     }))\n//   }));\n\nexport const enrichAssociationsWithColor = (\n  associations: TAssociationData[]\n): TAssociationData[] =>\n  associations.map(association =>\n    association.map(({ frequency, balls }) => ({\n      frequency,\n      balls: balls.map(([ball]): [number, string] => [ball, getBallColor(ball)])\n    }))\n  );\n\nconst createDrawItem = ({\n  position1,\n  position2,\n  position3,\n  position4,\n  position5,\n  position6,\n  bonusBall1,\n  powerBall,\n  drawNum\n}: ILottoDataJson): IDrawItem => ({\n  drawNum,\n  balls: [\n    [position1, getBallColor(position1)],\n    [position2, getBallColor(position2)],\n    [position3, getBallColor(position3)],\n    [position4, getBallColor(position4)],\n    [position5, getBallColor(position5)],\n    [position6, getBallColor(position6)],\n    [bonusBall1, getBallColor(bonusBall1)],\n    [powerBall, colors.ballPower]\n  ]\n});\n\ninterface IDrawShell {\n  segments: IDrawData[];\n  segment: IDrawData;\n}\n\nexport const createDrawData = (table: ILottoDataJson[]): IDrawData[] => {\n  const itemsPerCard = 50;\n  const shell = {\n    segments: [],\n    segment: { title: \"\", draws: [] }\n  };\n\n  const { segments } = table.reduce(\n    (acc, row, index) => {\n      const increment = index + 1;\n      const { segments, segment } = acc;\n      const { draws } = segment;\n      const { drawNum } = row;\n      const totalDraws = draws.length;\n      const isFull = totalDraws > itemsPerCard || increment === table.length;\n\n      if (isFull) {\n        segments.push({\n          title: `Draw ${drawNum + 1 + (totalDraws - 1)} to ${drawNum + 1}`,\n          draws\n        });\n        segment.draws = [createDrawItem(row)];\n      } else {\n        segment.draws.push(createDrawItem(row));\n      }\n\n      return { segments, segment };\n    },\n    shell as IDrawShell\n  );\n\n  return segments;\n};\n\nconst updateCombinationsNotification = (\n  progress = {},\n  duration: number = 0 // Seconds.\n) => {\n  notification.open({\n    key: \"combinationsWorker\",\n    message: \"Calculating Lotto Ball Combinations\",\n    description: <CombinationsProgress {...progress} />,\n    duration\n  });\n};\n\nexport const createCombinationsWorkerSequence = (\n  rangeDataAll: ILottoDataJson[]\n) => {\n  updateCombinationsNotification({});\n  const worker = new Worker(\"worker.js\");\n  const throttled = throttle(updateCombinationsNotification, 500);\n  const calculation = new Promise(resolve => {\n    worker.onmessage = event => {\n      const { isComplete, combinations, associations, progress } = event.data;\n      if (isComplete) {\n        throttled.cancel();\n        updateCombinationsNotification({}, 0.1);\n        resolve({\n          combinations: enrichCombinationsWithColor(combinations),\n          associations: enrichAssociationsWithColor(associations)\n        });\n      } else {\n        throttled(progress);\n      }\n    };\n  });\n\n  worker.postMessage(rangeDataAll);\n  return calculation;\n};\n\nexport const createErrorNotification = (\n  message: string = \"Error!\",\n  description: string = \"Sorry, there has been an error. Please retry again.\"\n) => {\n  notification.error({ message, description });\n};\n","import {\n  IReduxLottoDataState as IState,\n  EReduxActions as actions,\n  ILottoDataJson\n} from \"../../types\";\nimport { extractDateBoundsFromLottoData } from \"../../helpers\";\n\ninterface IAction {\n  type: actions.LOTTO_DATA_SAVE_ALL;\n  payload: ILottoDataJson[];\n}\n\nconst initialState = {\n  lottoDataAll: [],\n  lottoDataTotalItems: 0,\n  //\n  lottoDataOldestDate: 0,\n  lottoDataNewestDate: 0,\n  //\n  lottoDataIsFetching: true\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.LOTTO_DATA_SAVE_ALL: {\n      const lottoDataAll = action.payload;\n      const {\n        oldest: lottoDataOldestDate,\n        newest: lottoDataNewestDate\n      } = extractDateBoundsFromLottoData(lottoDataAll);\n      return {\n        ...state,\n        lottoDataAll,\n        lottoDataTotalItems: lottoDataAll.length,\n        lottoDataOldestDate,\n        lottoDataNewestDate,\n        lottoDataIsFetching: false\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  IReduxRangeDataState as IState,\n  EReduxActions as actions,\n  ILottoDataJson\n} from \"../../types\";\nimport { extractRangeDataFromLottoData } from \"../../helpers\";\n\ninterface IAction {\n  type: actions.RANGE_DATA_UPDATE;\n  payload: {\n    lottoDataAll: ILottoDataJson[];\n    rangeDataOldest: number; // Milliseconds.\n    rangeDataNewest: number; // Milliseconds.\n  };\n}\n\nconst initialState = {\n  rangeDataAll: [],\n  rangeDataTotalItems: 0,\n  //\n  rangeDataBaseBalls: [],\n  rangeDataPowerBalls: [],\n  rangeDataDraws: [],\n  //\n  rangeDataOldest: 0,\n  rangeDataNewest: 0\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.RANGE_DATA_UPDATE: {\n      const { lottoDataAll, rangeDataOldest, rangeDataNewest } = action.payload;\n      const {\n        rangeData: rangeDataAll,\n        baseBalls: rangeDataBaseBalls,\n        powerBalls: rangeDataPowerBalls,\n        rangeDataDraws: rangeDataDraws\n      } = extractRangeDataFromLottoData(\n        lottoDataAll,\n        rangeDataOldest,\n        rangeDataNewest\n      );\n\n      return {\n        ...state,\n        rangeDataAll,\n        rangeDataTotalItems: rangeDataAll.length,\n        //\n        rangeDataOldest,\n        rangeDataNewest,\n        //\n        rangeDataBaseBalls,\n        rangeDataPowerBalls,\n        rangeDataDraws\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  IReduxCombinationsState as IState,\n  EReduxActions as actions,\n  IComboData,\n  TAssociationData\n} from \"../../types\";\n\ninterface IAction {\n  type: actions.COMBINATIONS_UPDATE | actions.COMBINATIONS_CALCULATE;\n  payload: {\n    combinations: IComboData[];\n    associations: TAssociationData[];\n  };\n}\n\nconst initialState = {\n  combinationsData: [],\n  combinationAssociations: [],\n  combinationsIsCalculating: true\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.COMBINATIONS_UPDATE: {\n      const { combinations, associations } = action.payload;\n      return {\n        ...state,\n        combinationsData: combinations,\n        combinationAssociations: associations,\n        combinationsIsCalculating: false\n      };\n    }\n    case actions.COMBINATIONS_CALCULATE: {\n      return {\n        ...state,\n        combinationsIsCalculating: true\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport select from \"./select\";\nimport lottoData from \"./lottoData\";\nimport rangeData from \"./rangeData\";\nimport combinations from \"./combinations\";\n\nexport default combineReducers({\n  lottoData,\n  rangeData,\n  combinations,\n  select\n});\n","import { EReduxActions as actions, ILottoDataJson, IComboData } from \"../types\";\n\nexport const lottoDataFetch = () => ({\n  type: actions.LOTTO_DATA_FETCH\n});\n\nexport const lottoDataSaveAll = (lottoDataAll: ILottoDataJson[]) => ({\n  type: actions.LOTTO_DATA_SAVE_ALL,\n  payload: lottoDataAll\n});\n\nexport const rangeDataUpdateBase = ({\n  lottoDataAll,\n  rangeDataOldest,\n  rangeDataNewest\n}: {\n  lottoDataAll: ILottoDataJson[];\n  rangeDataOldest: number;\n  rangeDataNewest: number;\n}) => ({\n  type: actions.RANGE_DATA_UPDATE,\n  payload: { lottoDataAll, rangeDataOldest, rangeDataNewest }\n});\n\nexport const combinationsCalculate = () => ({\n  type: actions.COMBINATIONS_CALCULATE\n});\n\nexport const combinationsUpdate = (combinationsData: IComboData[]) => ({\n  type: actions.COMBINATIONS_UPDATE,\n  payload: combinationsData\n});\n\nexport const selectToggle = (ballNum: number) => ({\n  type: actions.SELECT_TOGGLE,\n  payload: ballNum\n});\n\nexport const selectClear = () => ({\n  type: actions.SELECT_CLEAR\n});\n","import { call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { EReduxActions as actions } from \"../types\";\nimport {\n  fetchCsvData,\n  convertLottoCsvDataToJson,\n  createCombinationsWorkerSequence,\n  createErrorNotification\n} from \"../helpers\";\nimport {\n  lottoDataSaveAll,\n  rangeDataUpdateBase,\n  combinationsCalculate,\n  combinationsUpdate\n} from \"./actions\";\n\nfunction* lottoDataAllFetchSaga(action: {}) {\n  try {\n    const response = yield call(fetchCsvData);\n    const lottoDataAll = yield convertLottoCsvDataToJson(response.data);\n\n    yield put(lottoDataSaveAll(lottoDataAll));\n    const {\n      lottoData: { lottoDataNewestDate }\n    } = yield select();\n    yield put(\n      rangeDataUpdateBase({\n        lottoDataAll,\n        rangeDataOldest: new Date(\"01/06/2018\").getTime(),\n        rangeDataNewest: lottoDataNewestDate\n      })\n    );\n    const {\n      rangeData: { rangeDataAll }\n    } = yield select();\n    yield put(combinationsCalculate());\n  } catch (error) {\n    createErrorNotification();\n  }\n}\n\nfunction* combinationsCalculateSaga() {\n  try {\n    const {\n      rangeData: { rangeDataAll }\n    } = yield select();\n    const response = yield createCombinationsWorkerSequence(rangeDataAll);\n    yield put(combinationsUpdate(response));\n  } catch (error) {\n    createErrorNotification();\n  }\n}\n\nfunction* sagas() {\n  yield takeLatest(actions.LOTTO_DATA_FETCH, lottoDataAllFetchSaga);\n  yield takeLatest(actions.COMBINATIONS_CALCULATE, combinationsCalculateSaga);\n}\n\nexport default sagas;\n","import React from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(sagas);\n\nexport default store;\n","import React, { SFC } from \"react\";\nimport styled from \"./styled\";\n\ninterface IProps {\n  title: string;\n  background: string;\n  minCard: number | string;\n  maxCard: number | string;\n}\n\nconst Container = styled.section<{ background: string }>`\n  background: ${({ background }) => background};\n  padding: 16px;\n`;\n\nconst Heading = styled.h2`\n  color: white;\n  margin: 0 0 16px;\n`;\n\nconst Grid = styled.div<{ minCard: number | string; maxCard: number | string }>`\n  display: grid;\n  grid-template-columns: ${({ minCard, maxCard }) =>\n    `repeat(auto-fit, minmax(${minCard}, ${maxCard}))`};\n  grid-gap: 16px;\n`;\n\nconst Section: SFC<IProps> = ({\n  title,\n  background,\n  minCard,\n  maxCard,\n  children\n}) => (\n  <Container background={background}>\n    <Heading>{title}</Heading>\n    <Grid minCard={minCard} maxCard={maxCard}>\n      {children}\n    </Grid>\n  </Container>\n);\n\nexport default Section;\n","import React, { PureComponent } from \"react\";\nimport { darken, lighten, rgba } from \"polished\";\nimport styled from \"./styled\";\n\nexport const Detail = styled.div`\n  align-items: center;\n  display: flex;\n  font-family: monospace;\n  font-size: 14px;\n  font-weight: 900;\n  height: 30px;\n  justify-content: center;\n`;\n\nconst Button = styled(Detail)<{\n  isActive: boolean;\n  color: string;\n  onClick: any;\n}>`\n  // Reset //\n  border: 0;\n  color: initial;\n  margin: 0;\n  padding: 0;\n\n  // Custom //\n  border: 1px solid ${({ color }) => color};\n  border-radius: 2px;\n  background: ${({ color }) => color};\n  color: white;\n  display: block;\n  transition: all 200ms;\n  width: 30px;\n\n  ${({ isActive, color }) =>\n    !isActive &&\n    `\n    color: ${darken(0.1, color)};\n    background: ${rgba(color, 0.1)};\n    border-color: ${rgba(color, 0.2)};\n  `}\n\n  ${({ onClick }) => {\n    switch (true) {\n      case Boolean(onClick): {\n        return `\n          cursor: pointer;\n          pointer-events: initial;\n\n          &:hover {\n            transform: scale(1.1);\n          }\n        `;\n      }\n      default: {\n        return `\n          pointer-events: none;\n        `;\n      }\n    }\n  }}\n`;\n\ninterface IState {}\n\ninterface IProps {\n  style?: {\n    [key: string]: string | number;\n  };\n  ball: number;\n  color: string;\n  isActive?: boolean;\n  handleClick?: (ball: number) => void;\n}\n\nclass Ball extends PureComponent<IProps, IState> {\n  handleClick = () => {\n    const { ball, handleClick } = this.props;\n    handleClick && handleClick(ball);\n  };\n\n  render() {\n    const { ball, color, isActive = true } = this.props;\n    return (\n      <Button\n        as=\"button\"\n        color={color}\n        isActive={isActive}\n        onClick={this.handleClick}\n      >\n        {ball}\n      </Button>\n    );\n  }\n}\n\nexport default Ball;\n","import React, { SFC } from \"react\";\nimport styled from \"./styled\";\nimport { colors } from \"./statics\";\n\nconst Grid = styled.div`\n  align-items: start;\n  display: grid;\n  grid-gap: 2px;\n`;\n\nconst BallsList = styled(Grid)`\n  grid-template-columns: repeat(auto-fit, 30px);\n`;\n\nexport const BallsWithDrawNumber = styled(Grid)`\n  grid-template-columns: auto repeat(7, 30px) 1fr;\n`;\n\nexport const BallsStack = styled(Grid)`\n  grid-template-columns: 1fr;\n`;\n\nexport const BallsGroup = styled(Grid)<{ total: number }>`\n  grid-template-columns: ${({ total }) =>\n    `repeat(auto-fill,minmax(${total * 30 + (total - 1) * 2}px, 1fr))`};\n  grid-gap: 10px;\n`;\n\nexport const BallsModule = styled(Grid)`\n  grid-column-gap: 6px;\n  grid-template-columns: auto 1fr;\n  padding: 6px;\n`;\n\nexport const BallsCombination = styled(Grid)`\n  height: 100%;\n  background: ${colors.bgLight};\n  border: 2px solid ${colors.bg200};\n  border-radius: 2px;\n  grid-column-gap: 6px;\n  grid-template-columns: auto 1fr;\n  padding: 12px;\n`;\n\nexport const BallsAssociation = styled(BallsCombination)`\n  grid-template-columns: auto 1fr;\n  grid-template-rows: repeat(auto-fill, 30px);\n`;\n\nexport const BallsStatistic = styled(BallsModule)`\n  grid-column-gap: 6px;\n`;\n\nexport const BallsDraw = styled(BallsModule)``;\n\nexport const BallsFrequecy = styled(Grid)`\n  grid-row-gap: 10px;\n`;\n\nexport default BallsList;\n","import React, { SFC } from \"react\";\nimport { Card, Button, Icon } from \"antd\";\nimport { createListFromTo, getBallColor } from \"./helpers\";\nimport Ball from \"./Ball\";\nimport BallsList, { BallsStack } from \"./Balls\";\n\ninterface ISelect {\n  handleToggle: (ball: number) => void;\n  handleClear?: () => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst optionsList = [\n  createListFromTo(1, 9),\n  createListFromTo(10, 19),\n  createListFromTo(20, 29),\n  createListFromTo(30, 39),\n  [40]\n];\n\nconst Select: SFC<ISelect> = ({ handleToggle, handleClear, checkIsActive }) => (\n  <Card title=\"Selection\" style={{ height: \"100%\" }}>\n    {handleClear && (\n      <Button\n        type=\"default\"\n        icon=\"close\"\n        size=\"small\"\n        onClick={handleClear}\n        style={{\n          position: \"absolute\",\n          right: \"16px\",\n          top: \"16px\"\n        }}\n      >\n        Clear\n      </Button>\n    )}\n    <BallsStack>\n      {optionsList.map(balls => (\n        <BallsList key={balls.join(\",\")}>\n          {balls.map(ball => (\n            <Ball\n              key={ball}\n              ball={ball}\n              color={getBallColor(ball)}\n              isActive={checkIsActive(ball)}\n              handleClick={() => handleToggle(ball)}\n            />\n          ))}\n        </BallsList>\n      ))}\n    </BallsStack>\n  </Card>\n);\n\nexport default Select;\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { createArrayOfLength } from \"./helpers\";\n\ninterface IBlobProps {\n  isInline?: boolean;\n  style?: {\n    [key: string]: number | string;\n  };\n}\n\nconst SkeletonBlob: SFC<IBlobProps> = ({ style, isInline }) => (\n  <div\n    className=\"ant-skeleton ant-skeleton-active\"\n    style={{ display: isInline ? \"inline-block\" : \"block\", width: \"auto\" }}\n  >\n    <span className=\"ant-skeleton-content\" style={{ display: \"block\" }}>\n      <span\n        className=\"ant-skeleton-title\"\n        style={{\n          height: \"30px\",\n          margin: 0,\n          display: \"block\",\n          width: \"100%\",\n          ...style\n        }}\n      />\n    </span>\n  </div>\n);\n\nexport const SkeletonInput: SFC<{}> = () => (\n  <SkeletonBlob\n    style={{\n      height: \"40px\"\n    }}\n  />\n);\n\ninterface ICardProps {\n  totalColumns?: number;\n  totalRows?: number;\n  totalCells?: number;\n  isTitleHidden?: boolean;\n}\n\nexport const SkeletonCard: SFC<ICardProps> = ({\n  totalColumns = 1,\n  totalRows = 1,\n  totalCells = 1,\n  isTitleHidden = false\n}) => (\n  <Card\n    title={!isTitleHidden && <SkeletonBlob style={{ height: '20px', maxWidth: \"120px\" }} />}\n  >\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(auto-fill,minmax(${totalCells * 40 + (totalCells - 1) * 2}px, 1fr))`,\n        gridRowGap: \"40px\"\n      }}\n    >\n      {createArrayOfLength(totalColumns).map((_, columnIndex) => (\n        <div key={columnIndex}>\n          {createArrayOfLength(totalRows).map((_, rowIndex) => (\n            <div\n              key={rowIndex}\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-start\"\n              }}\n            >\n              {createArrayOfLength(totalCells).map((_, cellIndex) => (\n                <SkeletonBlob\n                  key={`${rowIndex},${cellIndex}`}\n                  isInline\n                  style={{\n                    margin: \"5px 5px 5px 0\",\n                    width: \"30px\"\n                  }}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  </Card>\n);\n\nexport const SkeletonBaseBalls: SFC<{}> = () => <SkeletonCard totalRows={12} totalCells={5} />;\n\nexport const SkeletonCombinations: SFC<{}> = () => (\n  <SkeletonCard totalColumns={10} totalRows={10} totalCells={4} />\n);\n\nexport const SkeletonAssociations: SFC<{}> = () => (\n  <SkeletonCard totalColumns={12} totalRows={20} totalCells={3} isTitleHidden />\n);\n\nexport const SkeletonPowerBalls: SFC<{}> = () => (\n  <SkeletonCard totalRows={6} totalCells={4} />\n);\n\nexport const SkeletonDraws: SFC<{}> = () => (\n  <SkeletonCard totalRows={50} totalCells={8} />\n);\n\nexport default SkeletonBlob;\n","import React, { Fragment, SFC } from \"react\";\nimport moize from \"moize\";\nimport moment from \"moment\";\nimport { Card, DatePicker, Alert, Spin } from \"antd\";\nimport { dateFormat } from \"./statics\";\nimport { SkeletonInput } from \".//Skeleton\";\n\ninterface ITime {\n  absoluteOldestDate: number;\n  absoluteNewestDate: number;\n  currentOldestDate: number;\n  currentNewestDate: number;\n  handleChange: (_: any, fromToStrings: [string, string]) => void;\n  totalCurrentDraws: number;\n  totalPossibleDraws: number;\n  isLoading: boolean;\n}\n\nconst Time: SFC<ITime> = ({\n  absoluteOldestDate,\n  absoluteNewestDate,\n  currentOldestDate,\n  currentNewestDate,\n  handleChange,\n  totalCurrentDraws,\n  totalPossibleDraws,\n  isLoading\n}) => (\n  <Card title=\"Time\" style={{ height: \"100%\" }}>\n    <div style={{ maxWidth: \"560px\" }}>\n      {isLoading || (!currentOldestDate || !currentNewestDate) ? (\n        <SkeletonInput />\n      ) : (\n        <Fragment>\n          <DatePicker.RangePicker\n            style={{ width: \"100%\" }}\n            size=\"large\"\n            defaultValue={[\n              moment(new Date(currentOldestDate)),\n              moment(new Date(currentNewestDate))\n            ]}\n            format={dateFormat}\n            onChange={handleChange}\n          />\n          <Alert\n            style={{ margin: \"18px 0 0\" }}\n            type=\"info\"\n            showIcon\n            message={\n              <span>\n                Showing <strong>{totalCurrentDraws}</strong> from a possible{\" \"}\n                <strong>{totalPossibleDraws}</strong> draws.\n              </span>\n            }\n          />\n          {currentOldestDate < absoluteOldestDate && (\n            <Alert\n              style={{ margin: \"18px 0 0\" }}\n              type=\"warning\"\n              showIcon\n              message={\n                <span>\n                  The <strong>oldest</strong> <em>Lotto draw</em> record is{\" \"}\n                  <strong>\n                    {moment(new Date(absoluteOldestDate)).format(dateFormat)}\n                  </strong>\n                  .\n                </span>\n              }\n            />\n          )}\n          {currentNewestDate > absoluteNewestDate && (\n            <Alert\n              style={{ margin: \"18px 0 0\" }}\n              type=\"warning\"\n              showIcon\n              message={\n                <span>\n                  The <strong>latest</strong> <em>Lotto draw</em> record is{\" \"}\n                  <strong>\n                    {moment(new Date(absoluteNewestDate)).format(dateFormat)}\n                  </strong>\n                  .\n                </span>\n              }\n            />\n          )}\n        </Fragment>\n      )}\n    </div>\n  </Card>\n);\n\nexport default moize.reactSimple(Time);\n","import React, { SFC, Fragment } from \"react\";\nimport { Card } from \"antd\";\nimport { IBallData } from \"./types\";\nimport Ball, { Detail } from \"./Ball\";\nimport BallsList, { BallsFrequecy, BallsCombination } from \"./Balls\";\n\ninterface IStatistic {\n  title: IBallData[\"title\"];\n  frequencies: IBallData[\"frequencies\"];\n  handleToggle?: (ball: number) => void;\n  checkIsActive?: (ball: number) => boolean;\n}\n\nconst Statistic: SFC<IStatistic> = ({\n  title,\n  frequencies,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card title={title}>\n    <BallsFrequecy>\n      {frequencies.map(({ frequency, balls }) => (\n        <BallsCombination key={frequency}>\n          <Detail>x{frequency}</Detail>\n          <div>\n            <BallsList>\n              {balls.map(\n                ([ball, color]) =>\n                  Boolean(ball) && (\n                    <Ball\n                      key={ball}\n                      ball={ball}\n                      color={color}\n                      handleClick={handleToggle}\n                      isActive={!checkIsActive || checkIsActive(ball)}\n                    />\n                  )\n              )}\n            </BallsList>\n          </div>\n        </BallsCombination>\n      ))}\n    </BallsFrequecy>\n    {/* {frequencies.map(\n      ([ball, frequency, color]) =>\n        Boolean(ball) && (\n          <div key={ball}>\n            <Ball\n              ball={ball}\n              color={color}\n              handleClick={handleToggle}\n              isActive={!checkIsActive || checkIsActive(ball)}\n            />\n            x{frequency}\n          </div>\n        )\n    )} */}\n  </Card>\n);\n\nexport default Statistic;\n","import React, { SFC, Fragment } from \"react\";\nimport { Card } from \"antd\";\nimport { IDrawData } from \"./types\";\nimport Ball, { Detail } from \"./Ball\";\nimport BallsList, { BallsDraw, BallsGroup } from \"./Balls\";\n\ninterface IDraw extends IDrawData {\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Draw: SFC<IDraw> = ({ title, draws, handleToggle, checkIsActive }) => (\n  <Card title={title}>\n    <BallsDraw>\n      {draws.map(({ drawNum, balls }) => (\n        <Fragment key={drawNum}>\n          <Detail>#{drawNum}</Detail>\n          <BallsList>\n            {balls.map(([ball, color], index) =>\n              Boolean(ball) && index === 7 ? (\n                <Ball key=\"bonus\" ball={ball} color={color} />\n              ) : (\n                <Ball\n                  key={ball}\n                  ball={ball}\n                  color={color}\n                  handleClick={handleToggle}\n                  isActive={!checkIsActive || checkIsActive(ball)}\n                />\n              )\n            )}\n          </BallsList>\n        </Fragment>\n      ))}\n    </BallsDraw>\n  </Card>\n);\n\nexport default Draw;\n","import React, { SFC, Fragment } from \"react\";\nimport { Card } from \"antd\";\nimport { IComboData } from \"./types\";\nimport Ball, { Detail } from \"./Ball\";\nimport BallsList, {\n  BallsFrequecy,\n  BallsGroup,\n  BallsCombination\n} from \"./Balls\";\n\ninterface ICombinations {\n  title: string;\n  total: number;\n  combinations: IComboData[\"combinations\"];\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Combinations: SFC<ICombinations> = ({\n  title,\n  total,\n  combinations,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card title={title}>\n    <BallsFrequecy>\n      {combinations.map(({ frequency, matches }) => (\n        <BallsCombination key={frequency}>\n          <Detail>x{frequency}</Detail>\n          <BallsGroup total={total}>\n            {matches.map(balls => (\n              <BallsList key={balls.join(\",\")}>\n                {balls.map(\n                  ([ball, color]) =>\n                    Boolean(ball) && (\n                      <Ball\n                        key={ball}\n                        ball={ball}\n                        color={color}\n                        handleClick={handleToggle}\n                        isActive={!checkIsActive || checkIsActive(ball)}\n                      />\n                    )\n                )}\n              </BallsList>\n            ))}\n          </BallsGroup>\n        </BallsCombination>\n      ))}\n    </BallsFrequecy>\n  </Card>\n);\n\nexport default Combinations;\n","import React, { SFC, Fragment } from \"react\";\nimport { Card } from \"antd\";\nimport { TAssociationData } from \"./types\";\nimport Ball, { Detail } from \"./Ball\";\nimport BallsList, { BallsAssociation, BallsGroup } from \"./Balls\";\n\ninterface IAssociations {\n  associations: TAssociationData[];\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Associations: SFC<IAssociations> = ({\n  associations,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card>\n    <BallsGroup total={7}>\n      {associations.map((association, index) => (\n        <BallsAssociation key={index}>\n          {association.map(({ balls, frequency }, index) => (\n            <Fragment key={`${balls.join(\",\")}${index}`}>\n              <Detail>x{frequency}</Detail>\n              <div>\n                <BallsList>\n                  {balls.map(\n                    ([ball, color]) =>\n                      Boolean(ball) && (\n                        <Ball\n                          key={ball}\n                          ball={ball}\n                          color={color}\n                          handleClick={handleToggle}\n                          isActive={!checkIsActive || checkIsActive(ball)}\n                        />\n                      )\n                  )}\n                </BallsList>\n              </div>\n            </Fragment>\n          ))}\n        </BallsAssociation>\n      ))}\n    </BallsGroup>\n  </Card>\n);\n\nexport default Associations;\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { IPredictionData, TPrediction } from \"./types\";\nimport { colors } from \"./statics\";\nimport { getBallColor } from \"./helpers\";\nimport predictionsData from \"./predictions.json\";\nimport Ball from \"./Ball\";\nimport BallsList from \"./Balls\";\n\nconst balls: TPrediction = (predictionsData as IPredictionData[])\n  .slice(-1)[0]\n  .output.map(\n    (ball, index): [number, string] => [\n      ball,\n      index === 7 ? colors.ballPower : getBallColor(ball)\n    ]\n  );\n\ninterface IProps {\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Prediction: SFC<IProps> = ({ checkIsActive, handleToggle }) => (\n  <Card>\n    <BallsList>\n      {balls.map(\n        ([ball, color], index) =>\n          Boolean(ball) && (\n            <Ball\n              key={index} // Not the ball number encase numbers are duplicated.\n              ball={ball}\n              color={color}\n              handleClick={handleToggle}\n              isActive={!checkIsActive || checkIsActive(ball)}\n            />\n          )\n      )}\n    </BallsList>\n  </Card>\n);\n\nexport default Prediction;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport {\n  IReduxCompleteState,\n  IReduxLottoDataState,\n  IReduxRangeDataState,\n  IReduxCombinationsState,\n  IReduxSelectState,\n  IBallData,\n  ILottoDataJson,\n  IComboData,\n  IDrawData\n} from \"./types\";\nimport {\n  lottoDataFetch,\n  rangeDataUpdateBase,\n  selectToggle,\n  selectClear,\n  combinationsCalculate\n} from \"./redux/actions\";\nimport { createArrayOfLength } from \"./helpers\";\nimport { colors, dateFormat } from \"./statics\";\nimport Section from \"./Section\";\nimport Select from \"./Select\";\nimport Time from \"./Time\";\nimport Statistic from \"./Statistic\";\nimport Draw from \"./Draw\";\nimport Combinations from \"./Combinations\";\nimport Associations from \"./Associations\";\nimport Prediction from \"./Prediction\";\nimport {\n  SkeletonBaseBalls,\n  SkeletonCombinations,\n  SkeletonAssociations,\n  SkeletonPowerBalls,\n  SkeletonDraws\n} from \"./Skeleton\";\n\ninterface IAppState {}\n\ninterface IMapStateToProps\n  extends IReduxLottoDataState,\n    IReduxRangeDataState,\n    IReduxCombinationsState,\n    IReduxSelectState {}\n\ninterface IMapDispatchToProps {\n  lottoDataFetch: () => void;\n  rangeDataUpdateBase: (args: {\n    lottoDataAll: ILottoDataJson[];\n    rangeDataOldest: number;\n    rangeDataNewest: number;\n  }) => void;\n  selectToggle: (ballNum: number) => void;\n  selectClear: () => void;\n  combinationsCalculate: () => void;\n}\n\ninterface IAppProps extends IMapStateToProps, IMapDispatchToProps {}\n\nclass App extends Component<IAppProps, IAppState> {\n  state: IAppState = {};\n\n  constructor(props: IAppProps) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.lottoDataFetch();\n  }\n\n  checkIsCurrentBallActive = (ball: number): boolean => {\n    const { currentBalls } = this.props;\n    const isEmpty = !currentBalls.length;\n    const isActive = currentBalls.includes(ball);\n\n    return isEmpty || isActive;\n  };\n\n  updateFromToDates = (\n    _: any,\n    [oldestString, newestString]: [string, string]\n  ) => {\n    this.props.rangeDataUpdateBase({\n      lottoDataAll: this.props.lottoDataAll,\n      rangeDataOldest: moment(oldestString, dateFormat).valueOf(),\n      rangeDataNewest: moment(newestString, dateFormat).valueOf()\n    });\n    this.props.combinationsCalculate();\n  };\n\n  render() {\n    const {\n      lottoDataTotalItems,\n      lottoDataOldestDate,\n      lottoDataNewestDate,\n      lottoDataIsFetching,\n      //\n      rangeDataTotalItems,\n      rangeDataBaseBalls,\n      rangeDataPowerBalls,\n      rangeDataDraws,\n      rangeDataOldest,\n      rangeDataNewest,\n      //\n      currentBalls,\n      //\n      selectToggle,\n      selectClear,\n      //\n      combinationsData,\n      combinationAssociations,\n      combinationsIsCalculating\n    } = this.props;\n\n    return (\n      <div style={{ background: colors.bgLight, minHeight: \"100vh\" }}>\n        <Section\n          title=\"Settings\"\n          background={colors.bg200}\n          minCard=\"300px\"\n          maxCard=\"1fr\"\n        >\n          <Select\n            handleToggle={selectToggle}\n            checkIsActive={this.checkIsCurrentBallActive}\n            handleClear={Boolean(currentBalls.length) ? selectClear : undefined}\n          />\n\n          <Time\n            absoluteOldestDate={lottoDataOldestDate}\n            absoluteNewestDate={lottoDataNewestDate}\n            currentOldestDate={rangeDataOldest}\n            currentNewestDate={rangeDataNewest}\n            handleChange={this.updateFromToDates}\n            totalCurrentDraws={rangeDataTotalItems}\n            totalPossibleDraws={lottoDataTotalItems}\n            isLoading={lottoDataIsFetching}\n          />\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n\n        <Section\n          title=\"Machine Learning\"\n          background={colors.bg200}\n          minCard=\"300px\"\n          maxCard=\"1fr\"\n        >\n          <Prediction\n            handleToggle={selectToggle}\n            checkIsActive={this.checkIsCurrentBallActive}\n          />\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n\n        <Section\n          title=\"Single Balls\"\n          background={colors.bg200}\n          minCard=\"280px\"\n          maxCard=\"1fr\"\n        >\n          {(lottoDataIsFetching\n            ? createArrayOfLength(8)\n            : rangeDataBaseBalls\n          ).map(({ title, frequencies }: IBallData, index) =>\n            lottoDataIsFetching ? (\n              <SkeletonBaseBalls key={`skeleton${index}`} />\n            ) : (\n              <Statistic\n                key={title}\n                title={title}\n                frequencies={frequencies}\n                handleToggle={selectToggle}\n                checkIsActive={this.checkIsCurrentBallActive}\n              />\n            )\n          )}\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n\n        <Section\n          title=\"Balls Combinations\"\n          background={colors.bg200}\n          minCard=\"100%\"\n          maxCard=\"1fr\"\n        >\n          {(lottoDataIsFetching\n            ? createArrayOfLength(3)\n            : combinationsData\n          ).map(({ title, total, combinations }: IComboData, index) =>\n            lottoDataIsFetching || combinationsIsCalculating ? (\n              <SkeletonCombinations key={`skeleton${index}`} />\n            ) : (\n              <Combinations\n                key={title}\n                title={title}\n                total={total}\n                combinations={combinations}\n                handleToggle={selectToggle}\n                checkIsActive={this.checkIsCurrentBallActive}\n              />\n            )\n          )}\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n\n        <Section\n          title=\"Associations\"\n          background={colors.bg200}\n          minCard=\"1fr\"\n          maxCard=\"1fr\"\n        >\n          {lottoDataIsFetching || combinationsIsCalculating ? (\n            <SkeletonAssociations />\n          ) : (\n            <Associations\n              associations={combinationAssociations}\n              handleToggle={selectToggle}\n              checkIsActive={this.checkIsCurrentBallActive}\n            />\n          )}\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n\n        <Section\n          title=\"Power Ball\"\n          background={colors.bg200}\n          minCard=\"300px\"\n          maxCard=\"1fr\"\n        >\n          {(lottoDataIsFetching\n            ? createArrayOfLength(1)\n            : rangeDataPowerBalls\n          ).map(({ frequencies }: IBallData, index) =>\n            lottoDataIsFetching ? (\n              <SkeletonPowerBalls key={`skeleton${index}`} />\n            ) : (\n              <Statistic\n                key={`powerBall${index}`}\n                title={\"\"}\n                frequencies={frequencies}\n              />\n            )\n          )}\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n\n        <Section\n          title=\"Draws\"\n          background={colors.bg200}\n          minCard=\"360px\"\n          maxCard=\"1fr\"\n        >\n          {(lottoDataIsFetching ? createArrayOfLength(3) : rangeDataDraws).map(\n            ({ title, draws }: IDrawData, index) =>\n              lottoDataIsFetching ? (\n                <SkeletonDraws key={`skeleton${index}`} />\n              ) : (\n                <Draw\n                  key={title}\n                  title={title}\n                  draws={draws}\n                  handleToggle={selectToggle}\n                  checkIsActive={this.checkIsCurrentBallActive}\n                />\n              )\n          )}\n        </Section>\n\n        {/*\n          - - - - - - - - - - - - - - - -\n          */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IReduxCompleteState): IMapStateToProps => ({\n  ...state.lottoData,\n  ...state.rangeData,\n  ...state.combinations,\n  ...state.select\n});\n\n// const mapDispatchToProps = (dispatch: any): IMapDispatchToProps => ({\n//   lottoDataFetch: (...args) => dispatch(lottoDataFetch(...args)),\n//   selectToggle: (...args) => dispatch(selectToggle(...args)),\n//   selectClear: (...args) => dispatch(selectClear(...args))\n// });\n\nconst mapDispatchToProps = {\n  lottoDataFetch,\n  rangeDataUpdateBase,\n  selectToggle,\n  selectClear,\n  combinationsCalculate\n};\n\nexport default connect(\n  mapStateToProps, // as () => IMapStateToProps,\n  mapDispatchToProps // as () => IMapDispatchToProps\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport { createGlobalStyle } from \"./styled\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nconst GlobalStyles = createGlobalStyle`\n  .ant-card-body {\n    padding: 12px !important;\n  }\n`;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    <GlobalStyles />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}