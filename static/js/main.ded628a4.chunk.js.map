{"version":3,"sources":["types.ts","statics.ts","helpers.ts","Ball.tsx","Select.tsx","Time.tsx","Statistic.tsx","Combinations.tsx","ContentSpinner.tsx","ContentProgress.tsx","App.tsx","index.tsx"],"names":["EBallKeys","colors","dateFormat","getTimeNow","Date","getTime","createListFromTo","from","to","Array","fill","map","_","index","getBallColor","ball","getFrequencies","json","columns","max","createColor","shell","reduce","acc","Object","objectSpread","defineProperty","concat","frequencies","accFreq","row","accCol","column","entries","sort","_ref","_ref2","slicedToArray","_ref5","_ref6","enrichJsonData","csvJson","_ref8","position1","position2","position3","position4","position5","position6","drawNum","Draw","bonusBall1","bonusBall2","powerBall","drawDate","drawTime","setToFromDate","jsonAll","fromDate","toDate","jsonSlice","filter","_ref7","sliceItemsByTime","ballData","title","powerData","Ball","color","handleClick","react_default","a","createElement","tag","style","margin","minWidth","textAlign","onClick","optionsList","Select","handleToggle","checkIsActive","card","height","balls","key","join","opacity","display","src_Ball","Time","dateRangeMin","dateRangeMax","handleChange","currentDraws","totalDraws","Boolean","maxWidth","date_picker","RangePicker","width","size","defaultValue","moment","format","onChange","es_alert","type","showIcon","message","spin","Statistic","_ref3","frequency","Combinations","combinations","_ref4","ContentSpinner","col","span","xs","ContentProgress","percent","es_progress","status","marginTop","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","workerPercent","comboData","currentBalls","worker","checkShouldProgressUpdate","prevUpdate","currentUpdate","shouldUpdate","getData","asyncToGenerator","regenerator_default","mark","_callee","response","csv","enrichedJson","_setToFromDate","wrap","_context","prev","next","axios","method","url","sent","data","csvToJson","fromString","slice","Worker","postMessage","setState","prevState","stop","toggleCurrentBall","newBall","prevBalls","includes","prevBall","toConsumableArray","checkIsCurrentBall","isEmpty","length","isActive","updateFromToDates","toString","valueOf","_setToFromDate2","_this2","onmessage","event","_event$data","isComplete","progress","setTimeout","_ref9","_ref10","_ref11","Math","round","_this3","_this$state","background","minHeight","padding","es_row","gutter","lg","xxl","src_Select","src_Time","src_ContentSpinner","src_Statistic","src_ContentProgress","src_Combinations","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"2IAwCYA,kNCxCCC,EAEC,UAFDA,EAGF,UAHEA,EAIA,UAJAA,EAKC,UALDA,EAMD,UANCA,EAQH,UARGA,EASF,UAGEC,EAAa,+BD4BdF,2SExBL,IAAMG,EAAa,kBAAM,IAAIC,MAAOC,WAE9BC,EAAmB,SAACC,EAAcC,GAAf,OAC9B,IAAIC,MAAMD,EAAKD,EAAO,GAAGG,KAAK,GAAGC,IAAI,SAACC,EAAGC,GAAJ,OAAcN,EAAOM,KAE/CC,EAAe,SAACC,GAC3B,QAAQ,GACN,KAAKA,GAAQ,GACX,OAAOd,EACT,KAAKc,GAAQ,GACX,OAAOd,EACT,KAAKc,GAAQ,GACX,OAAOd,EACT,KAAKc,GAAQ,GACX,OAAOd,EACT,QACE,OAAOA,IAIAe,EAAiB,SAC5BC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAQ,IAAIZ,MAAMU,GACrBT,KAAK,GACLY,OAAO,SAACC,EAAKX,EAAGC,GAAT,OAAAW,OAAAC,EAAA,EAAAD,CAAA,GAAyBD,EAAzBC,OAAAE,EAAA,EAAAF,CAAA,MAAAG,OAAkCd,EAAQ,GAAM,KAAM,IAE1De,EAAcX,EAAKK,OAAO,SAACO,EAASC,GACxC,OAAOZ,EAAQI,OAAO,SAACS,EAAQC,GAC7B,IAAMjB,EAAOe,EAAIE,GACjB,OAAOR,OAAAC,EAAA,EAAAD,CAAA,GACFO,EADLP,OAAAE,EAAA,EAAAF,CAAA,GAEGT,EAAOgB,EAAOhB,GAAQ,KAExBc,IACFR,GAEH,OAAOG,OAAOS,QAAQL,GACnBM,KAAK,SAAAC,EAAAC,GAAA,OAAAZ,OAAAa,EAAA,EAAAb,CAAAW,EAAA,MAAAX,OAAAa,EAAA,EAAAb,CAAAY,EAAA,OACuB,EAAI,IAEhCzB,IACC,SAAA2B,GAAA,IAAAC,EAAAf,OAAAa,EAAA,EAAAb,CAAAc,EAAA,GAAEvB,EAAFwB,EAAA,SAAuC,EACpCxB,GADHwB,EAAA,GAGEnB,GAAaL,OAYRyB,EAAiB,SAACC,GAAD,OAC5BA,EAAQ9B,IACN,SAAA+B,GAAA,IACKC,EADLD,EACE,GACGE,EAFLF,EAEE,GACGG,EAHLH,EAGE,GACGI,EAJLJ,EAIE,GACGK,EALLL,EAKE,GACGM,EANLN,EAME,GACMO,EAPRP,EAOEQ,KACcC,EARhBT,EAQE,cACkBU,EATpBV,EASE,kBACcW,EAVhBX,EAUE,cACaY,EAXfZ,EAWE,aAXF,MAYO,CACLC,WAAYA,EACZC,WAAYA,EACZC,WAAYA,EACZC,WAAYA,EACZC,WAAYA,EACZC,WAAYA,EACZG,YAAaA,EACbC,YAAaA,EACbC,WAAYA,EACZJ,SAAUA,EACVK,WACAC,SAAU,IAAInD,KAAKkD,GAAUjD,cAItBmD,EAAgB,SAC3BC,EACAC,EACAC,GAMA,IAAMC,EA9CwB,SAC9B3C,EACAyC,EACAC,GAH8B,OAK9B1C,EAAK4C,OAAO,SAAAC,GAAA,IAAGP,EAAHO,EAAGP,SAAH,OAAkBA,GAAYG,GAAYH,GAAYI,IAyChDI,CAAiBN,EAASC,EAAUC,GAEpDhB,EAQE3C,EARF2C,UACAC,EAOE5C,EAPF4C,UACAC,EAME7C,EANF6C,UACAC,EAKE9C,EALF8C,UACAC,EAIE/C,EAJF+C,UACAC,EAGEhD,EAHFgD,UACAG,EAEEnD,EAFFmD,WACAE,EACErD,EADFqD,UAkBF,MAAO,CACLW,SAhBe,CACf,CAACC,MAAO,gBAAiBrC,YAAaZ,EAAe4C,EAAW,CAACjB,EAAWA,EAAWC,EAAWC,EAAWC,EAAWC,EAAWC,EAAWG,GAAa,GAAIrC,IAC/J,CAACmD,MAAO,WAAYrC,YAAaZ,EAAe4C,EAAW,CAACjB,GAAY,GAAI7B,IAC5E,CAACmD,MAAO,WAAYrC,YAAaZ,EAAe4C,EAAW,CAAChB,GAAY,GAAI9B,IAC5E,CAACmD,MAAO,aAAcrC,YAAaZ,EAAe4C,EAAW,CAACf,GAAY,GAAI/B,IAC9E,CAACmD,MAAO,YAAarC,YAAaZ,EAAe4C,EAAW,CAACd,GAAY,GAAIhC,IAC7E,CAACmD,MAAO,YAAarC,YAAaZ,EAAe4C,EAAW,CAACb,GAAY,GAAIjC,IAC7E,CAACmD,MAAO,WAAYrC,YAAaZ,EAAe4C,EAAW,CAACZ,GAAY,GAAIlC,IAC5E,CAACmD,MAAO,aAAcrC,YAAaZ,EAAe4C,EAAW,CAACT,GAAa,GAAIrC,KAS/EoD,UANgB,CAChB,CAACD,MAAO,aAAcrC,YAAaZ,EAAe4C,EAAW,CAACP,GAAY,GAAI,iBAAM,WAMpFO,gCC3HWO,EAVU,SAAAhC,GAAA,IAAGpB,EAAHoB,EAAGpB,KAAMqD,EAATjC,EAASiC,MAAOC,EAAhBlC,EAAgBkC,YAAhB,OACvBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEL,MAAOA,EACPM,MAAO,CAAEC,OAAQ,MAAOC,SAAU,OAAQC,UAAW,UACrDC,QAAS,kBAAMT,EAAYtD,KAE1BA,ICRCgE,EAAc,CAClBzE,EAAiB,EAAG,GACpBA,EAAiB,GAAI,IACrBA,EAAiB,GAAI,IACrBA,EAAiB,GAAI,IACrB,CAAC,KA2BY0E,EAxBc,SAAA7C,GAAA,IAAG8C,EAAH9C,EAAG8C,aAAcC,EAAjB/C,EAAiB+C,cAAjB,OAC3BZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMlB,MAAM,YAAYS,MAAO,CAAEU,OAAQ,SACtCL,EAAYpE,IAAI,SAAA0E,GAAK,OACpBf,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAME,KAAK,MAClBF,EAAM1E,IAAI,SAAAI,GAAI,OACbuD,EAAAC,EAAAC,cAAA,QACEc,IAAKvE,EACL2D,MAAO,CACLc,QAASN,EAAcnE,GAAQ,EAAI,GACnC0E,QAAS,iBAGXnB,EAAAC,EAAAC,cAACkB,EAAD,CACE3E,KAAMA,EACNqD,MAAOtD,EAAaC,GACpBsD,YAAa,kBAAMY,EAAalE,yCCmD/B4E,EArEU,SAAAxD,GAAA,IACvByD,EADuBzD,EACvByD,aACAC,EAFuB1D,EAEvB0D,aACAnC,EAHuBvB,EAGvBuB,SACAC,EAJuBxB,EAIvBwB,OACAmC,EALuB3D,EAKvB2D,aACAC,EANuB5D,EAMvB4D,aACAC,EAPuB7D,EAOvB6D,WAPuB,OASvB1B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMlB,MAAM,OAAOS,MAAO,CAAEU,OAAQ,SAChCa,QAAQvC,GAAYC,GAGpBW,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEwB,SAAU,UACtB5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAWC,YAAZ,CACE1B,MAAO,CAAE2B,MAAO,QAChBC,KAAK,QACLC,aAAc,CAACC,IAAO,IAAIpG,KAAKsD,IAAY8C,IAAO,IAAIpG,KAAKuD,KAC3D8C,OAAQvG,EACRwG,SAAUZ,IAEZxB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACEjC,MAAO,CAAEC,OAAQ,YACjBiC,KAAK,OACLC,UAAQ,EACRC,QACExC,EAAAC,EAAAC,cAAA,uBACUF,EAAAC,EAAAC,cAAA,cAASuB,GADnB,mBAC0D,IACxDzB,EAAAC,EAAAC,cAAA,cAASwB,GAFX,aAMHtC,EAAWkC,GACVtB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACEjC,MAAO,CAAEC,OAAQ,YACjBiC,KAAK,UACLC,UAAQ,EACRC,QACExC,EAAAC,EAAAC,cAAA,mBACMF,EAAAC,EAAAC,cAAA,wBADN,IAC8BF,EAAAC,EAAAC,cAAA,wBAD9B,aAC4D,IAC1DF,EAAAC,EAAAC,cAAA,cACGgC,IAAO,IAAIpG,KAAKwF,IAAea,OAAOvG,IAH3C,OAULyD,EAASkC,GACRvB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACEjC,MAAO,CAAEC,OAAQ,YACjBiC,KAAK,UACLC,UAAQ,EACRC,QACExC,EAAAC,EAAAC,cAAA,mBACMF,EAAAC,EAAAC,cAAA,wBADN,IAC8BF,EAAAC,EAAAC,cAAA,wBAD9B,aAC4D,IAC1DF,EAAAC,EAAAC,cAAA,cACGgC,IAAO,IAAIpG,KAAKyF,IAAeY,OAAOvG,IAH3C,QA3CRoE,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMT,KAAK,YCcFU,EA5BoB,SAAA7E,GAAA,IACjC8B,EADiC9B,EACjC8B,MACArC,EAFiCO,EAEjCP,YACAqD,EAHiC9C,EAGjC8C,aACAC,EAJiC/C,EAIjC+C,cAJiC,OAMjCZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMlB,MAAOA,GACVrC,EAAYjB,IACX,SAAAyB,GAAA,IAAA6E,EAAAzF,OAAAa,EAAA,EAAAb,CAAAY,EAAA,GAAErB,EAAFkG,EAAA,GAAQC,EAARD,EAAA,GAAmB7C,EAAnB6C,EAAA,UACEhB,QAAQlF,IACNuD,EAAAC,EAAAC,cAAA,OACEc,IAAKvE,EACL2D,MAAO,CACLc,QAASN,EAAcnE,GAAQ,EAAI,KAGrCuD,EAAAC,EAAAC,cAACkB,EAAD,CACE3E,KAAMA,EACNqD,MAAOA,EACPC,YAAa,kBAAMY,EAAalE,MATpC,IAWImG,OCQCC,EA7B0B,SAAAhF,GAAA,IACvC8B,EADuC9B,EACvC8B,MACAmD,EAFuCjF,EAEvCiF,aACAnC,EAHuC9C,EAGvC8C,aACAC,EAJuC/C,EAIvC+C,cAJuC,OAMvCZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMlB,MAAOA,GACVmD,EAAazG,IAAI,SAAAyB,GAAA,IAAGiD,EAAHjD,EAAGiD,MAAO6B,EAAV9E,EAAU8E,UAAV,OAChB5C,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAME,KAAK,MAClBF,EAAM1E,IAAI,SAAAsG,GAAA,IAAAI,EAAA7F,OAAAa,EAAA,EAAAb,CAAAyF,EAAA,GAAElG,EAAFsG,EAAA,GAAQjD,EAARiD,EAAA,UACT/C,EAAAC,EAAAC,cAAA,QACEc,IAAKvE,EACL2D,MAAO,CACLc,QAASN,EAAcnE,GAAQ,EAAI,KAGrCuD,EAAAC,EAAAC,cAACkB,EAAD,CACE3E,KAAMA,EACNqD,MAAOA,EACPC,YAAa,kBAAMY,EAAalE,SAXxC,IAeImG,OCxBKI,EAN8B,kBAC3ChD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAI/C,MAAO,CAAEC,OAAQ,UACtCL,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMT,KAAK,sBCoBAoB,GApBgC,SAAAvF,GAAA,IAAGwF,EAAHxF,EAAGwF,QAAH,OAC7CrD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAI/C,MAAO,CAAEC,OAAQ,UACtCL,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEwB,SAAU,UACtB5B,EAAAC,EAAAC,cAACoD,GAAA,EAAD,CAAUD,QAASA,EAASE,OAAO,WACnCvD,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACEjC,MAAO,CAAEoD,UAAW,QACpBhB,QACExC,EAAAC,EAAAC,cAAA,2BACcF,EAAAC,EAAAC,cAAA,wBADd,6DAE0BF,EAAAC,EAAAC,cAAA,4BAF1B,2DAMFoC,KAAK,OACLC,UAAQ,OCqTDkB,eAnRb,SAAAA,EAAYC,GAAkB,IAAAC,EAAA,OAAAzG,OAAA0G,EAAA,EAAA1G,CAAA2G,KAAAJ,IAC5BE,EAAAzG,OAAA4G,EAAA,EAAA5G,CAAA2G,KAAA3G,OAAA6G,EAAA,EAAA7G,CAAAuG,GAAAO,KAAAH,KAAMH,KAlBRO,MAAmB,CACjBC,WAAW,EACXC,cAAe,EACfzE,SAAU,GACVE,UAAW,GACXwE,UAAW,GACXC,aAAc,GACd/C,aAAc,EACdC,aAAc,EACdnC,SAAU,EACVC,OAAQ,EACRF,QAAS,GACTG,UAAW,IAKiBqE,EAF9BW,YAE8B,EAAAX,EAM9BY,0BAA6B,WAC3B,IAAIC,EAAa3I,IAEjB,OAAO,WACL,IAAM4I,EAAgB5I,IAEhB6I,EAAeD,EADFD,EAAa,IAOhC,OAJIE,IACFF,EAAaC,GAGRC,GAZkB,GANCf,EAmD9BgB,QAnD8BzH,OAAA0H,EAAA,EAAA1H,CAAA2H,EAAA5E,EAAA6E,KAmDpB,SAAAC,IAAA,IAAAC,EAAAC,EAAA9G,EAAA+G,EAAA/F,EAAAmC,EAAAlC,EAAAmC,EAAAlC,EAAA8F,EAAAzF,EAAAE,EAAAN,EAAA,OAAAuF,EAAA5E,EAAAmF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACeC,IAAM,CAC3BC,OAAQ,MACRC,IAAK,sBAHC,cACFV,EADEK,EAAAM,KAKMV,EAAQD,EAAdY,KALAP,EAAAE,KAAA,EAMcM,MAAYC,WAAWb,GANrC,OAMF9G,EANEkH,EAAAM,KAOFT,EAAehH,EAAeC,GAC9BgB,EAAU+F,EACV5D,EAAe4D,EAAaa,OAAO,GAAG,GAAG9G,SACzCG,EAAW,IAAItD,KAAK,cAAcC,UAClCwF,EAAe2D,EAAa,GAAGjG,SAX7BkG,EAamCjG,EACzCC,EACAC,EAHIC,EAASkC,GACP7B,EAbAyF,EAaAzF,SAAUE,EAbVuF,EAaUvF,UAAWN,EAbrB6F,EAaqB7F,UAM7B0G,QAAUrC,EAAKW,OAAO2B,YAAY,CAAEtJ,KAAM2C,IAC1CqE,EAAKuC,SAAS,SAAAC,GAAS,OAAAjJ,OAAAC,EAAA,EAAAD,CAAA,GAClBiJ,EADkB,CAErBjC,WAAW,EACX/E,UACAG,YACAgC,eACAC,eACAnC,WACAC,SACAK,WACAE,gBA9BM,yBAAAyF,EAAAe,SAAArB,EAAAlB,SAnDoBF,EAqF9B0C,kBAAoB,SAACC,GACnB3C,EAAKuC,SAAS,SAAAC,GAAa,IACHI,EAAcJ,EAA5B9B,aAEFA,EADkBkC,EAAUC,SAASF,GAEvCC,EAAUhH,OAAO,SAAAkH,GAAQ,OAAIA,IAAaH,IADV,GAAAjJ,OAAAH,OAAAwJ,EAAA,EAAAxJ,CAE5BqJ,GAF4B,CAEjBD,IAEnB,OAAOpJ,OAAAC,EAAA,EAAAD,CAAA,GAAKiJ,EAAZ,CAAuB9B,oBA7FGV,EAiG9BgD,mBAAqB,SAAClK,GAA0B,IACtC4H,EAAiBV,EAAKM,MAAtBI,aACFuC,GAAWvC,EAAawC,OACxBC,EAAWzC,EAAamC,SAAS/J,GAEvC,OAAOmK,GAAWE,GAtGUnD,EAyG9BoD,kBAAoB,SAACzK,EAADwB,GAAsD,IAAA6E,EAAAzF,OAAAa,EAAA,EAAAb,CAAAY,EAAA,GAA5CgI,EAA4CnD,EAAA,GAAhCqE,EAAgCrE,EAAA,GACxEgB,EAAKuC,SAAS,SAAAC,GAAS,OAAAjJ,OAAAC,EAAA,EAAAD,CAAA,GAClBiJ,EADkB,CAErBhC,cAAe,MAHuD,IAMhEhF,EAAYwE,EAAKM,MAAjB9E,QACFC,EAAW8C,IAAO4D,EAAYlK,GAAYqL,UAC1C5H,EAAS6C,IAAO8E,EAAUpL,GAAYqL,UAR4BC,EAS7BhI,EACzCC,EACAC,EACAC,GAHMK,EATgEwH,EAShExH,SAAUE,EATsDsH,EAStDtH,UAAWN,EAT2C4H,EAS3C5H,UAM7B0G,QAAUrC,EAAKW,OAAO2B,YAAY,CAAEtJ,KAAM2C,IAC1CqE,EAAKuC,SAAS,SAAAC,GAAS,OAAAjJ,OAAAC,EAAA,EAAAD,CAAA,GAClBiJ,EADkB,CAErB7G,YACAF,WACAC,SACAK,WACAE,iBA7HF+D,EAAKW,OAAS0B,QAAU,IAAIA,OAAO,aACnCrC,EAAKgB,UAHuBhB,mFAsBV,IAAAwD,EAAAtD,KACdmC,SACFnC,KAAKS,OAAO8C,UAAY,SAAAC,GAAS,IAAAC,EACgBD,EAAMzB,KAA7C2B,EADuBD,EACvBC,WAAYzE,EADWwE,EACXxE,aAAc0E,EADHF,EACGE,SAE9BD,GACFJ,EAAKjB,SAAS,SAAAC,GAAS,OAAAjJ,OAAAC,EAAA,EAAAD,CAAA,GAClBiJ,EADkB,CAErBhC,cAAe,OAEjBsD,WAAW,WACTN,EAAKjB,SAAS,SAAAC,GAAS,OAAAjJ,OAAAC,EAAA,EAAAD,CAAA,GAClBiJ,EADkB,CAErBhC,cAAe,IACfC,WR2DZA,EQ3DmDtB,ER6DnDsB,EAAU/H,IAAI,SAAAqL,GAAA,MAA8B,CAC1C/H,MADY+H,EAAG/H,MAEfmD,aAFY4E,EAAU5E,aAEKzG,IAAI,SAAAsL,GAAA,MAA2B,CACxD/E,UAD6B+E,EAAG/E,UAEhC7B,MAF6B4G,EAAc5G,MAE9B1E,IAAI,SAAAuL,GAAA,IAAEnL,EAAFS,OAAAa,EAAA,EAAAb,CAAA0K,EAAA,YAA8B,CAACnL,EAAMD,EAAaC,eAP9B,IACzC2H,KQzDW,MACM+C,EAAK5C,6BACd4C,EAAKjB,SAAS,SAAAC,GAAS,OAAAjJ,OAAAC,EAAA,EAAAD,CAAA,GAClBiJ,EADkB,CAErBhC,cAAe0D,KAAKC,MACjBN,EAAWrB,EAAU7G,UAAUuH,OAAU,4CAwF7C,IAAAkB,EAAAlE,KAAAmE,EAaHnE,KAAKI,MAXPC,EAFK8D,EAEL9D,UACAC,EAHK6D,EAGL7D,cACA7C,EAJK0G,EAIL1G,aACAC,EALKyG,EAKLzG,aACAnC,EANK4I,EAML5I,SACAC,EAPK2I,EAOL3I,OACAF,EARK6I,EAQL7I,QACAG,EATK0I,EASL1I,UACAI,EAVKsI,EAULtI,SACAE,EAXKoI,EAWLpI,UACAwE,EAZK4D,EAYL5D,UAEF,OACEpE,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAE6H,WAAYtM,EAAgBuM,UAAW,UACnDlI,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACL6H,WAAYtM,EACZwM,QAAS,aAGXnI,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEN,MAAO,QAASO,OAAQ,IAArC,kBACAL,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAK9F,KAAK,OAAO+F,OAAQ,IACvBrI,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAImF,GAAI,GAAIC,IAAK,GAAInI,MAAO,CAAEC,OAAQ,UACvDL,EAAAC,EAAAC,cAACsI,EAAD,CACE7H,aAAckD,KAAKwC,kBACnBzF,cAAeiD,KAAK8C,sBAIxB3G,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAImF,GAAI,GAAIC,IAAK,GAAInI,MAAO,CAAEC,OAAQ,UACvDL,EAAAC,EAAAC,cAACuI,EAAD,CACEnH,aAAcA,EACdC,aAAcA,EACdnC,SAAUA,EACVC,OAAQA,EACRmC,aAAcqC,KAAKkD,kBACnBtF,aAAcnC,EAAUuH,OACxBnF,WAAYvC,EAAQ0H,YAM5B7G,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAE+H,QAAS,SACrBnI,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAK9F,KAAK,OAAO+F,OAAQ,IACvBrI,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAI/C,MAAO,CAAEC,OAAQ,UACtCL,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAEwB,SAAU,UAAtB,mBACkB5B,EAAAC,EAAAC,cAAA,wBADlB,2BAC8D,IAC5DF,EAAAC,EAAAC,cAAA,mCAFF,yCAGaF,EAAAC,EAAAC,cAAA,4BAHb,MAMDgE,EACClE,EAAAC,EAAAC,cAACwI,EAAD,MAEAhJ,EAASrD,IAAI,SAAA0G,GAAA,IAAGpD,EAAHoD,EAAGpD,MAAOrC,EAAVyF,EAAUzF,YAAV,OACX0C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEjC,IAAKrB,EACLuD,KAAM,GACNC,GAAI,EACJmF,GAAI,EACJC,IAAK,EACLnI,MAAO,CAAEC,OAAQ,UAEjBL,EAAAC,EAAAC,cAACyI,EAAD,CACEhJ,MAAOA,EACPrC,YAAaA,EACbqD,aAAcoH,EAAK1B,kBACnBzF,cAAemH,EAAKpB,wBAK5B3G,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAI/C,MAAO,CAAEC,OAAQ,UACtCL,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAEwB,SAAU,UAAtB,mBACkB5B,EAAAC,EAAAC,cAAA,wBADlB,iDAEqBF,EAAAC,EAAAC,cAAA,4BAFrB,eAE6D,IAC3DF,EAAAC,EAAAC,cAAA,2BAHF,mCAG6D,IAC3DF,EAAAC,EAAAC,cAAA,6BAJF,MAODgE,EACClE,EAAAC,EAAAC,cAACwI,EAAD,MACEvE,EAAgB,IAClBnE,EAAAC,EAAAC,cAAC0I,GAAD,CAAiBvF,QAASc,IAE1BC,EAAU/H,IAAI,SAAA2B,GAAA,IAAG2B,EAAH3B,EAAG2B,MAAOmD,EAAV9E,EAAU8E,aAAV,OACZ9C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEjC,IAAKrB,EACLuD,KAAM,GACNC,GAAI,GACJmF,GAAI,GACJC,IAAK,EACLnI,MAAO,CAAEC,OAAQ,UAEjBL,EAAAC,EAAAC,cAAC2I,EAAD,CACElJ,MAAOA,EACPmD,aAAcA,EACdnC,aAAcoH,EAAK1B,kBACnBzF,cAAemH,EAAKpB,wBAK5B3G,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAKC,KAAM,GAAIC,GAAI,GAAI/C,MAAO,CAAEC,OAAQ,UACtCL,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAEwB,SAAU,UAAtB,oCACmC5B,EAAAC,EAAAC,cAAA,8BADnC,oDAE6C,IAC3CF,EAAAC,EAAAC,cAAA,yBAHF,IAG2BF,EAAAC,EAAAC,cAAA,wBAH3B,uBAMDgE,EACClE,EAAAC,EAAAC,cAACwI,EAAD,MAEA9I,EAAUvD,IAAI,SAAA4B,GAAA,IAAG0B,EAAH1B,EAAG0B,MAAOrC,EAAVW,EAAUX,YAAV,OACZ0C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEjC,IAAKrB,EACLuD,KAAM,GACNC,GAAI,EACJmF,GAAI,EACJC,IAAK,EACLnI,MAAO,CAAEC,OAAQ,UAEjBL,EAAAC,EAAAC,cAACyI,EAAD,CACEhJ,MAAO,GACPrC,YAAaA,EACbqD,aAAc,aACdC,cAAe,kBAAM,kBAzRvBkI,aChClBC,IAASC,OAAOhJ,EAAAC,EAAAC,cAAC+I,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.ded628a4.chunk.js","sourcesContent":["export type TBallFrequency = [\n  number, // Ball.\n  number, // Frequency.\n  string // Color.\n];\n\nexport interface IBallData {\n  title: string;\n  frequencies: TBallFrequency[];\n}\n\nexport interface IBallCsv {\n  1: string;\n  2: string;\n  3: string;\n  4: string;\n  5: string;\n  6: string;\n  Draw: string;\n  \"Bonus Ball\": string;\n  \"2nd Bonus Ball\": string;\n  \"Power Ball\": string;\n  \"Draw Date\": string;\n}\n\nexport interface IBallJson {\n  position1: number;\n  position2: number;\n  position3: number;\n  position4: number;\n  position5: number;\n  position6: number;\n  bonusBall1: number;\n  bonusBall2: number;\n  powerBall: number;\n  drawNum: number;\n  drawDate: string;\n  drawTime: number;\n}\n\nexport enum EBallKeys {\n  position1 = \"position1\",\n  position2 = \"position2\",\n  position3 = \"position3\",\n  position4 = \"position4\",\n  position5 = \"position5\",\n  position6 = \"position6\",\n  bonusBall1 = \"bonusBall1\",\n  bonusBall2 = \"bonusBall2\",\n  powerBall = \"powerBall\",\n  drawNum = \"drawNum\",\n  drawDate = \"drawDate\",\n  drawTime = \"drawTime\"\n}\n\nexport interface ICombinations {\n  balls: [\n    number, // Ball.\n    string // Color.\n  ][];\n  frequency: number;\n}\n\nexport interface IComboData {\n  title: string;\n  combinations: ICombinations[];\n}\n","export const colors = {\n  // Balls.\n  ballPurple: \"#6200EA\",\n  ballRed: \"#E53935\",\n  ballGreen: \"#00BFA5\",\n  ballOrange: \"#FF6D00\",\n  ballBlue: \"#2962FF\",\n  // Background.\n  bgDark: \"#001529\",\n  bgLight: \"#f0f2f5\"\n};\n\nexport const dateFormat = \"YYYY/MM/DD\";\n","import {\n  TBallFrequency,\n  IBallData,\n  IBallCsv,\n  IBallJson,\n  EBallKeys,\n  IComboData,\n  ICombinations\n} from \"./types\";\nimport { colors } from \"./statics\";\nimport { Table } from \"antd\";\nimport { pathToFileURL } from \"url\";\n\n// const MIN_COMBO_FREQUENCY = 3;\n// const MIN_COMBO_MATCH_LENGTH = 4;\n\nexport const getTimeNow = () => new Date().getTime();\n\nexport const createListFromTo = (from: number, to: number): number[] =>\n  new Array(to - from + 1).fill(0).map((_, index) => from + index);\n\nexport const getBallColor = (ball: number): string => {\n  switch (true) {\n    case ball >= 40:\n      return colors.ballPurple;\n    case ball >= 30:\n      return colors.ballRed;\n    case ball >= 20:\n      return colors.ballGreen;\n    case ball >= 10:\n      return colors.ballOrange;\n    default:\n      return colors.ballBlue;\n  }\n};\n\nexport const getFrequencies = (\n  json: IBallJson[],\n  columns: EBallKeys[],\n  max: number,\n  createColor: (ball: number) => string\n): TBallFrequency[] => {\n  const shell = new Array(max)\n    .fill(0)\n    .reduce((acc, _, index) => ({ ...acc, [`${index + 1}`]: 0 }), {});\n\n  const frequencies = json.reduce((accFreq, row) => {\n    return columns.reduce((accCol, column) => {\n      const ball = row[column];\n      return {\n        ...accCol,\n        [ball]: accCol[ball] + 1\n      };\n    }, accFreq);\n  }, shell);\n\n  return Object.entries(frequencies)\n    .sort(([, frequencyA], [, frequencyB]) =>\n      frequencyA > frequencyB ? -1 : 1\n    )\n    .map(\n      ([ball, frequency]): TBallFrequency => [\n        +ball,\n        +frequency,\n        createColor(+ball)\n      ]\n    );\n};\n\nexport const sliceItemsByTime = (\n  json: IBallJson[],\n  fromDate: number,\n  toDate: number\n): IBallJson[] =>\n  json.filter(({ drawTime }) => drawTime >= fromDate && drawTime <= toDate);\n\nexport const enrichJsonData = (csvJson: IBallCsv[]): IBallJson[] =>\n  csvJson.map(\n    ({\n      1: position1, //                 \"33\"\n      2: position2, //                 \"15\"\n      3: position3, //                 \"11\"\n      4: position4, //                 \"2\"\n      5: position5, //                 \"35\"\n      6: position6, //                 \"10\"\n      Draw: drawNum, //                \"1816\"\n      \"Bonus Ball\": bonusBall1, //     \"5\"\n      \"2nd Bonus Ball\": bonusBall2, // \"\"\n      \"Power Ball\": powerBall, //      \"8\"\n      \"Draw Date\": drawDate //         \"Saturday 29 December 2018\"\n    }) => ({\n      position1: +position1,\n      position2: +position2,\n      position3: +position3,\n      position4: +position4,\n      position5: +position5,\n      position6: +position6,\n      bonusBall1: +bonusBall1,\n      bonusBall2: +bonusBall2,\n      powerBall: +powerBall,\n      drawNum: +drawNum,\n      drawDate,\n      drawTime: new Date(drawDate).getTime()\n    })\n  );\n\nexport const setToFromDate = (\n  jsonAll: IBallJson[],\n  fromDate: number,\n  toDate: number\n): {\n  ballData: IBallData[];\n  powerData: IBallData[];\n  jsonSlice: IBallJson[];\n} => {\n  const jsonSlice = sliceItemsByTime(jsonAll, fromDate, toDate);\n  const {\n    position1,\n    position2,\n    position3,\n    position4,\n    position5,\n    position6,\n    bonusBall1,\n    powerBall\n  } = EBallKeys;\n  // prettier-ignore\n  const ballData = [\n    {title: 'Most Frequent', frequencies: getFrequencies(jsonSlice, [position1, position1, position2, position3, position4, position5, position6, bonusBall1], 40, getBallColor) },\n    {title: 'Ball One', frequencies: getFrequencies(jsonSlice, [position1], 40, getBallColor) },\n    {title: 'Ball Two', frequencies: getFrequencies(jsonSlice, [position2], 40, getBallColor) },\n    {title: 'Ball Three', frequencies: getFrequencies(jsonSlice, [position3], 40, getBallColor) },\n    {title: 'Ball Four', frequencies: getFrequencies(jsonSlice, [position4], 40, getBallColor) },\n    {title: 'Ball Five', frequencies: getFrequencies(jsonSlice, [position5], 40, getBallColor) },\n    {title: 'Ball Six', frequencies: getFrequencies(jsonSlice, [position6], 40, getBallColor) },\n    {title: 'Bonus Ball', frequencies: getFrequencies(jsonSlice, [bonusBall1], 40, getBallColor) },\n  ];\n  // prettier-ignore\n  const powerData = [\n    {title: 'Power Ball', frequencies: getFrequencies(jsonSlice, [powerBall], 10, () => 'blue') }\n  ];\n\n  return {\n    ballData,\n    powerData,\n    jsonSlice\n  };\n};\n\nexport const enrichCombinationsWithColor = (\n  comboData: IComboData[]\n): IComboData[] =>\n  comboData.map(({ title, combinations }) => ({\n    title,\n    combinations: combinations.map(({ frequency, balls }) => ({\n      frequency,\n      balls: balls.map(([ball]): [number, string] => [ball, getBallColor(ball)])\n    }))\n  }));\n\n// type TComparison = number[];\n\n// const compareRows = (\n//   table: TComparison[],\n//   comparison: TComparison\n// ): TComparison[] =>\n//   table.reduce((acc: TComparison[], row: TComparison) => {\n//     const match = comparison.filter(ball => row.includes(ball)).sort();\n//     const isMatch = Boolean(match.length >= MIN_COMBO_MATCH_LENGTH);\n\n//     return isMatch ? [...acc, match] : acc;\n//   }, []);\n\n// const compareTable = (table: TComparison[]): TComparison[] =>\n//   table.reduce((acc: TComparison[], row: TComparison, index) => {\n//     const data = [...table.slice(0, index), ...table.slice(index + 1)];\n\n//     return [...acc, ...compareRows(data, row)];\n//   }, []);\n\n// interface ICombinationKeys {\n//   [key: string]: IComboData;\n// }\n\n// const getFrequency = (matches: TComparison[]): ICombinationKeys =>\n//   matches.reduce((acc: ICombinationKeys, match: TComparison) => {\n//     const key = match.join(\",\");\n//     const hasKey = acc.hasOwnProperty(key);\n\n//     if (hasKey) {\n//       acc[key].frequency++;\n//     } else {\n//       acc[key] = {\n//         balls: match,\n//         frequency: 1\n//       };\n//     }\n\n//     return acc;\n//   }, {});\n\n// const flattenSequence = (frequency: ICombinationKeys): IComboData[] =>\n//   Object.values(frequency).reduce(\n//     (acc: IComboData[], item: IComboData) => [\n//       ...acc,\n//       { balls: item.balls, frequency: item.frequency }\n//     ],\n//     []\n//   );\n\n// const prepareComboData = (table: IBallJson[]): TComparison[] =>\n//   table.reduce(\n//     (acc: TComparison[], row: IBallJson) => [\n//       ...acc,\n//       [\n//         row.position1,\n//         row.position2,\n//         row.position3,\n//         row.position4,\n//         row.position5,\n//         row.position6,\n//         row.bonusBall1\n//       ]\n//     ],\n//     []\n//   );\n\n// const sortCombinations = (table: IComboData[]): IComboData[] => {\n//   const allCombinations = table\n//     .filter(({ frequency }) => frequency >= MIN_COMBO_FREQUENCY)\n//     .sort(({ frequency: frequencyA }, { frequency: frequencyB }) =>\n//       frequencyA > frequencyB ? -1 : 1\n//     )\n//     .sort(({ balls: ballsA }, { balls: ballsB }) =>\n//       ballsA.length > ballsB.length ? -1 : 1\n//     );\n\n//   return allCombinations.slice(0, 10);\n// };\n\n// export const createComboData = (table: IBallJson[]): IComboData[] => {\n//   const prepped = prepareComboData(table);\n//   const matches = compareTable(prepped);\n//   const frequencies = getFrequency(matches);\n//   const flattened = flattenSequence(frequencies);\n//   const sorted = sortCombinations(flattened);\n\n//   return sorted;\n// };\n","import React, { SFC } from \"react\";\nimport { Tag } from \"antd\";\n\ninterface IBall {\n  style?: {\n    [key: string]: string | number;\n  };\n  ball: number;\n  color: string;\n  handleClick: (ball: number) => void;\n}\n\nconst Ball: SFC<IBall> = ({ ball, color, handleClick }) => (\n  <Tag\n    color={color}\n    style={{ margin: \"4px\", minWidth: \"40px\", textAlign: \"center\" }}\n    onClick={() => handleClick(ball)}\n  >\n    {ball}\n  </Tag>\n);\n\nexport default Ball;\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { createListFromTo, getBallColor } from \"./helpers\";\nimport Ball from \"./Ball\";\n\ninterface ISelect {\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst optionsList = [\n  createListFromTo(1, 9),\n  createListFromTo(10, 19),\n  createListFromTo(20, 29),\n  createListFromTo(30, 39),\n  [40]\n];\n\nconst Select: SFC<ISelect> = ({ handleToggle, checkIsActive }) => (\n  <Card title=\"Selection\" style={{ height: \"100%\" }}>\n    {optionsList.map(balls => (\n      <div key={balls.join(\",\")}>\n        {balls.map(ball => (\n          <span\n            key={ball}\n            style={{\n              opacity: checkIsActive(ball) ? 1 : 0.2,\n              display: \"inline-block\"\n            }}\n          >\n            <Ball\n              ball={ball}\n              color={getBallColor(ball)}\n              handleClick={() => handleToggle(ball)}\n            />\n          </span>\n        ))}\n      </div>\n    ))}\n  </Card>\n);\n\nexport default Select;\n","import React, { Fragment, SFC } from \"react\";\nimport moment from \"moment\";\nimport { Card, DatePicker, Alert, Spin } from \"antd\";\nimport { dateFormat } from \"./statics\";\n\ninterface ITime {\n  dateRangeMin: number;\n  dateRangeMax: number;\n  fromDate: number;\n  toDate: number;\n  handleChange: (_: any, fromToStrings: [string, string]) => void;\n  currentDraws: number;\n  totalDraws: number;\n}\n\nconst Time: SFC<ITime> = ({\n  dateRangeMin,\n  dateRangeMax,\n  fromDate,\n  toDate,\n  handleChange,\n  currentDraws,\n  totalDraws\n}) => (\n  <Card title=\"Time\" style={{ height: \"100%\" }}>\n    {!Boolean(fromDate && toDate) ? (\n      <Spin size=\"large\" />\n    ) : (\n      <div style={{ maxWidth: \"560px\" }}>\n        <DatePicker.RangePicker\n          style={{ width: \"100%\" }}\n          size=\"large\"\n          defaultValue={[moment(new Date(fromDate)), moment(new Date(toDate))]}\n          format={dateFormat}\n          onChange={handleChange}\n        />\n        <Alert\n          style={{ margin: \"18px 0 0\" }}\n          type=\"info\"\n          showIcon\n          message={\n            <span>\n              Showing <strong>{currentDraws}</strong> from a possible{\" \"}\n              <strong>{totalDraws}</strong> draws.\n            </span>\n          }\n        />\n        {fromDate < dateRangeMin && (\n          <Alert\n            style={{ margin: \"18px 0 0\" }}\n            type=\"warning\"\n            showIcon\n            message={\n              <span>\n                The <strong>oldest</strong> <em>Lotto draw</em> record is{\" \"}\n                <strong>\n                  {moment(new Date(dateRangeMin)).format(dateFormat)}\n                </strong>\n                .\n              </span>\n            }\n          />\n        )}\n        {toDate > dateRangeMax && (\n          <Alert\n            style={{ margin: \"18px 0 0\" }}\n            type=\"warning\"\n            showIcon\n            message={\n              <span>\n                The <strong>latest</strong> <em>Lotto draw</em> record is{\" \"}\n                <strong>\n                  {moment(new Date(dateRangeMax)).format(dateFormat)}\n                </strong>\n                .\n              </span>\n            }\n          />\n        )}\n      </div>\n    )}\n  </Card>\n);\n\nexport default Time;\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { IBallData } from \"./types\";\nimport Ball from \"./Ball\";\n\ninterface IStatistic {\n  title: IBallData[\"title\"];\n  frequencies: IBallData[\"frequencies\"];\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Statistic: SFC<IStatistic> = ({\n  title,\n  frequencies,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card title={title}>\n    {frequencies.map(\n      ([ball, frequency, color]) =>\n        Boolean(ball) && (\n          <div\n            key={ball}\n            style={{\n              opacity: checkIsActive(ball) ? 1 : 0.2\n            }}\n          >\n            <Ball\n              ball={ball}\n              color={color}\n              handleClick={() => handleToggle(ball)}\n            />\n            x{frequency}\n          </div>\n        )\n    )}\n  </Card>\n);\n\nexport default Statistic;\n","import React, { SFC, Fragment } from \"react\";\nimport { Card } from \"antd\";\nimport { IComboData } from \"./types\";\nimport Ball from \"./Ball\";\n\ninterface ICombinations {\n  title: string;\n  combinations: IComboData[\"combinations\"];\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Combinations: SFC<ICombinations> = ({\n  title,\n  combinations,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card title={title}>\n    {combinations.map(({ balls, frequency }) => (\n      <div key={balls.join(\",\")}>\n        {balls.map(([ball, color]) => (\n          <span\n            key={ball}\n            style={{\n              opacity: checkIsActive(ball) ? 1 : 0.2\n            }}\n          >\n            <Ball\n              ball={ball}\n              color={color}\n              handleClick={() => handleToggle(ball)}\n            />\n          </span>\n        ))}\n        x{frequency}\n      </div>\n    ))}\n  </Card>\n);\n\nexport default Combinations;\n","import React, { SFC } from \"react\";\nimport { Spin, Col } from \"antd\";\n\ninterface IContentSpinner {}\n\nconst ContentSpinner: SFC<IContentSpinner> = () => (\n  <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n    <Spin size=\"large\" />\n  </Col>\n);\n\nexport default ContentSpinner;\n","import React, { SFC } from \"react\";\nimport { Progress, Alert, Col } from \"antd\";\n\ninterface IContentProgress {\n  percent: number;\n}\n\nconst ContentProgress: SFC<IContentProgress> = ({ percent }) => (\n  <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n    <div style={{ maxWidth: \"900px\" }}>\n      <Progress percent={percent} status=\"active\" />\n      <Alert\n        style={{ marginTop: \"16px\" }}\n        message={\n          <span>\n            Calculating <em>Lotto Ball</em> combinations is a time consuming\n            process. The larger the <strong>date range</strong> you have chosen\n            the longer this calculation will take.\n          </span>\n        }\n        type=\"info\"\n        showIcon\n      />\n    </div>\n  </Col>\n);\n\nexport default ContentProgress;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport csvToJson from \"csvtojson\";\nimport moment from \"moment\";\nimport { Row, Col } from \"antd\";\nimport { IBallData, IBallJson, IComboData } from \"./types\";\nimport { colors, dateFormat } from \"./statics\";\nimport {\n  setToFromDate,\n  enrichJsonData,\n  enrichCombinationsWithColor,\n  getTimeNow\n} from \"./helpers\";\nimport Select from \"./Select\";\nimport Time from \"./Time\";\nimport Statistic from \"./Statistic\";\nimport Combinations from \"./Combinations\";\nimport ContentSpinner from \"./ContentSpinner\";\nimport ContentProgress from \"./ContentProgress\";\n\ninterface IAppState {\n  isLoading: boolean;\n  workerPercent: number;\n  ballData: IBallData[];\n  powerData: IBallData[];\n  comboData: IComboData[];\n  currentBalls: number[];\n  dateRangeMin: number; // Milliseconds.\n  dateRangeMax: number; // Milliseconds.\n  fromDate: number; //     Milliseconds.\n  toDate: number; //       Milliseconds.\n  jsonAll: IBallJson[];\n  jsonSlice: IBallJson[];\n}\n\ninterface IAppProps {}\n\nclass App extends Component<IAppProps, IAppState> {\n  state: IAppState = {\n    isLoading: true,\n    workerPercent: 0,\n    ballData: [],\n    powerData: [],\n    comboData: [],\n    currentBalls: [],\n    dateRangeMin: 0,\n    dateRangeMax: 0,\n    fromDate: 0,\n    toDate: 0,\n    jsonAll: [],\n    jsonSlice: []\n  };\n\n  worker: Worker;\n\n  constructor(props: IAppProps) {\n    super(props);\n    this.worker = Worker && new Worker(\"worker.js\");\n    this.getData();\n  }\n\n  checkShouldProgressUpdate = (() => {\n    let prevUpdate = getTimeNow();\n\n    return () => {\n      const currentUpdate = getTimeNow();\n      const nextUpdate = prevUpdate + 500;\n      const shouldUpdate = currentUpdate > nextUpdate;\n\n      if (shouldUpdate) {\n        prevUpdate = currentUpdate;\n      }\n\n      return shouldUpdate;\n    };\n  })();\n\n  componentDidMount() {\n    if (Worker) {\n      this.worker.onmessage = event => {\n        const { isComplete, combinations, progress } = event.data;\n\n        if (isComplete) {\n          this.setState(prevState => ({\n            ...prevState,\n            workerPercent: 99\n          }));\n          setTimeout(() => {\n            this.setState(prevState => ({\n              ...prevState,\n              workerPercent: 100,\n              comboData: enrichCombinationsWithColor(combinations)\n            }));\n          }, 500);\n        } else if (this.checkShouldProgressUpdate()) {\n          this.setState(prevState => ({\n            ...prevState,\n            workerPercent: Math.round(\n              (progress / prevState.jsonSlice.length) * 100\n            )\n          }));\n        }\n      };\n    }\n  }\n\n  getData = async () => {\n    const response = await axios({\n      method: \"get\",\n      url: \"lotto-numbers.csv\"\n    });\n    const { data: csv } = response;\n    const csvJson = await csvToJson().fromString(csv);\n    const enrichedJson = enrichJsonData(csvJson);\n    const jsonAll = enrichedJson;\n    const dateRangeMin = enrichedJson.slice(-1)[0].drawTime;\n    const fromDate = new Date(\"01/06/2017\").getTime();\n    const dateRangeMax = enrichedJson[0].drawTime;\n    const toDate = dateRangeMax;\n    const { ballData, powerData, jsonSlice } = setToFromDate(\n      jsonAll,\n      fromDate,\n      toDate\n    );\n\n    Worker && this.worker.postMessage({ json: jsonSlice });\n    this.setState(prevState => ({\n      ...prevState,\n      isLoading: false,\n      jsonAll,\n      jsonSlice,\n      dateRangeMin,\n      dateRangeMax,\n      fromDate,\n      toDate,\n      ballData,\n      powerData\n    }));\n  };\n\n  toggleCurrentBall = (newBall: number): void => {\n    this.setState(prevState => {\n      const { currentBalls: prevBalls } = prevState;\n      const isAlreadyActive = prevBalls.includes(newBall);\n      const currentBalls = isAlreadyActive\n        ? prevBalls.filter(prevBall => prevBall !== newBall)\n        : [...prevBalls, newBall];\n\n      return { ...prevState, currentBalls };\n    });\n  };\n\n  checkIsCurrentBall = (ball: number): boolean => {\n    const { currentBalls } = this.state;\n    const isEmpty = !currentBalls.length;\n    const isActive = currentBalls.includes(ball);\n\n    return isEmpty || isActive;\n  };\n\n  updateFromToDates = (_: any, [fromString, toString]: [string, string]) => {\n    this.setState(prevState => ({\n      ...prevState,\n      workerPercent: 0\n    }));\n\n    const { jsonAll } = this.state;\n    const fromDate = moment(fromString, dateFormat).valueOf();\n    const toDate = moment(toString, dateFormat).valueOf();\n    const { ballData, powerData, jsonSlice } = setToFromDate(\n      jsonAll,\n      fromDate,\n      toDate\n    );\n\n    Worker && this.worker.postMessage({ json: jsonSlice });\n    this.setState(prevState => ({\n      ...prevState,\n      jsonSlice,\n      fromDate,\n      toDate,\n      ballData,\n      powerData\n    }));\n  };\n\n  render() {\n    const {\n      isLoading,\n      workerPercent,\n      dateRangeMin,\n      dateRangeMax,\n      fromDate,\n      toDate,\n      jsonAll,\n      jsonSlice,\n      ballData,\n      powerData,\n      comboData\n    } = this.state;\n    return (\n      <div style={{ background: colors.bgLight, minHeight: \"100vh\" }}>\n        <div\n          style={{\n            background: colors.bgDark,\n            padding: \"8px 16px\"\n          }}\n        >\n          <h1 style={{ color: \"white\", margin: 0 }}>Lotto Settings</h1>\n          <Row type=\"flex\" gutter={16}>\n            <Col span={24} xs={24} lg={24} xxl={12} style={{ margin: \"8px 0\" }}>\n              <Select\n                handleToggle={this.toggleCurrentBall}\n                checkIsActive={this.checkIsCurrentBall}\n              />\n            </Col>\n\n            <Col span={24} xs={24} lg={24} xxl={12} style={{ margin: \"8px 0\" }}>\n              <Time\n                dateRangeMin={dateRangeMin}\n                dateRangeMax={dateRangeMax}\n                fromDate={fromDate}\n                toDate={toDate}\n                handleChange={this.updateFromToDates}\n                currentDraws={jsonSlice.length}\n                totalDraws={jsonAll.length}\n              />\n            </Col>\n          </Row>\n        </div>\n\n        <div style={{ padding: \"16px\" }}>\n          <Row type=\"flex\" gutter={16}>\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Single Balls</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                Looking at each <em>Lotto Ball</em> in isolation. What ball{\" \"}\n                <strong>appeared the most</strong>? Where did each ball fall\n                during the <strong>draw order</strong>?\n              </p>\n            </Col>\n            {isLoading ? (\n              <ContentSpinner />\n            ) : (\n              ballData.map(({ title, frequencies }: IBallData) => (\n                <Col\n                  key={title}\n                  span={12}\n                  xs={8}\n                  lg={6}\n                  xxl={3}\n                  style={{ margin: \"8px 0\" }}\n                >\n                  <Statistic\n                    title={title}\n                    frequencies={frequencies}\n                    handleToggle={this.toggleCurrentBall}\n                    checkIsActive={this.checkIsCurrentBall}\n                  />\n                </Col>\n              ))\n            )}\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Balls Combinations</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                Finding similar <em>Lotto Ball</em> combinations between each\n                draw. We disregard <strong>ball order</strong> and instead{\" \"}\n                <strong>aggregate</strong> each combination match based on{\" \"}\n                <strong>ball values</strong>.\n              </p>\n            </Col>\n            {isLoading ? (\n              <ContentSpinner />\n            ) : workerPercent < 100 ? (\n              <ContentProgress percent={workerPercent} />\n            ) : (\n              comboData.map(({ title, combinations }: IComboData) => (\n                <Col\n                  key={title}\n                  span={24}\n                  xs={24}\n                  lg={12}\n                  xxl={6}\n                  style={{ margin: \"8px 0\" }}\n                >\n                  <Combinations\n                    title={title}\n                    combinations={combinations}\n                    handleToggle={this.toggleCurrentBall}\n                    checkIsActive={this.checkIsCurrentBall}\n                  />\n                </Col>\n              ))\n            )}\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Power Ball</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                Show the most frequent appearing <em>Lotto Power Ball</em>. This\n                part of the draw has no affiliation to the{\" \"}\n                <strong>generic</strong> <em>Lotto Ball</em> references above.\n              </p>\n            </Col>\n            {isLoading ? (\n              <ContentSpinner />\n            ) : (\n              powerData.map(({ title, frequencies }: IBallData) => (\n                <Col\n                  key={title}\n                  span={12}\n                  xs={8}\n                  lg={6}\n                  xxl={4}\n                  style={{ margin: \"8px 0\" }}\n                >\n                  <Statistic\n                    title={\"\"}\n                    frequencies={frequencies}\n                    handleToggle={() => {}}\n                    checkIsActive={() => true}\n                  />\n                </Col>\n              ))\n            )}\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}