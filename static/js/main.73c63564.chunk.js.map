{"version":3,"sources":["types.ts","redux/reducers/select.ts","statics.ts","helpers.tsx","redux/reducers/lottoData.ts","redux/reducers/rangeData.ts","redux/reducers/combinations.ts","redux/reducers/index.ts","redux/actions.ts","redux/sagas.ts","redux/store.ts","Ball.tsx","Select.tsx","Skeleton.tsx","Time.tsx","Statistic.tsx","Draw.tsx","Combinations.tsx","App.tsx","index.tsx"],"names":["EReduxActions","ELottoJsonKeys","initialState","currentBalls","colors","dateFormat","fetchCsvData","axios","method","url","createArrayOfLength","length","Array","fill","createListFromTo","from","to","map","_","index","getBallColor","ball","getFrequencies","json","columns","max","createColor","shell","reduce","acc","Object","objectSpread","defineProperty","concat","frequencies","accFreq","row","accCol","column","entries","sort","_ref","_ref2","slicedToArray","_ref5","_ref6","enrichJsonData","csvJson","_ref8","position1","position2","position3","position4","position5","position6","drawNum","Draw","bonusBall1","bonusBall2","powerBall","drawDate","drawTime","Date","getTime","convertLottoCsvDataToJson","_ref9","asyncToGenerator","regenerator_default","a","mark","_callee","rawCsvData","wrap","_context","prev","next","csvToJson","fromString","sent","abrupt","stop","this","_x","apply","arguments","createDrawItem","_ref14","balls","createDrawData","table","increment","segments","segment","draws","totalDraws","push","title","updateCombinationsNotification","progress","duration","undefined","notification","open","key","message","description","react_default","createElement","es_progress","percent","status","createCombinationsWorkerSequence","rangeDataAll","worker","Worker","throttled","throttle","calculation","Promise","resolve","onmessage","event","_event$data","data","isComplete","combinations","cancel","_ref10","_ref11","frequency","_ref12","postMessage","createErrorNotification","error","lottoDataAll","lottoDataTotalItems","lottoDataOldestDate","lottoDataNewestDate","lottoDataIsFetching","rangeDataTotalItems","rangeDataBaseBalls","rangeDataPowerBalls","rangeDataDraws","rangeDataOldest","rangeDataNewest","combinationsData","combinationsIsCalculating","combineReducers","lottoData","state","action","type","actions","LOTTO_DATA_SAVE_ALL","payload","_extractDateBoundsFro","oldest","slice","newest","rangeData","RANGE_DATA_UPDATE","_action$payload","_extractRangeDataFrom","jsonAll","filter","_ref7","sliceItemsByTime","baseBalls","powerBalls","extractRangeDataFromLottoData","COMBINATIONS_UPDATE","COMBINATIONS_CALCULATE","select","SELECT_TOGGLE","prevBalls","toggledBall","nextBalls","includes","prevItem","toConsumableArray","SELECT_CLEAR","lottoDataSaveAll","rangeDataUpdateBase","combinationsCalculate","combinationsUpdate","lottoDataAllFetchSaga","combinationsCalculateSaga","sagas","response","call","put","t0","_marked","_ref3","_context2","_marked2","_context3","takeLatest","LOTTO_DATA_FETCH","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","run","Ball","handleClick","_this$props","_this","props","_this$props2","color","tag","style","margin","minWidth","textAlign","pointerEvents","onClick","PureComponent","optionsList","Select","handleToggle","handleClear","checkIsActive","card","height","es_button","icon","size","position","right","top","join","opacity","display","src_Ball","SkeletonBlob","isInline","className","width","SkeletonInput","Skeleton_SkeletonBlob","SkeletonCard","totalRows","totalCells","maxWidth","rowIndex","justifyContent","cellIndex","SkeletonBaseBalls","Skeleton_SkeletonCard","SkeletonCombinations","SkeletonPowerBalls","SkeletonDraws","moize","reactSimple","absoluteOldestDate","absoluteNewestDate","currentOldestDate","currentNewestDate","handleChange","totalCurrentDraws","totalPossibleDraws","isLoading","react","date_picker","RangePicker","defaultValue","moment","format","onChange","es_alert","showIcon","Skeleton_SkeletonInput","Statistic","Boolean","_ref4","Combinations","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","checkIsCurrentBallActive","isEmpty","isActive","updateFromToDates","oldestString","newestString","valueOf","lottoDataFetch","_this2","selectToggle","selectClear","background","minHeight","padding","es_row","gutter","col","span","xs","lg","xxl","src_Select","src_Time","Skeleton_SkeletonBaseBalls","src_Statistic","Skeleton_SkeletonCombinations","src_Combinations","Skeleton_SkeletonPowerBalls","Skeleton_SkeletonDraws","src_Draw","Component","mapDispatchToProps","ballNum","connect","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.73c63564.chunk.js","sourcesContent":["export interface IReduxLottoDataState {\n  lottoDataAll: ILottoDataJson[];\n  lottoDataTotalItems: number;\n  //\n  lottoDataOldestDate: number; // Milliseconds.\n  lottoDataNewestDate: number; // Milliseconds.\n  //\n  lottoDataIsFetching: boolean;\n}\n\nexport interface IReduxRangeDataState {\n  rangeDataAll: ILottoDataJson[];\n  rangeDataTotalItems: number;\n  //\n  rangeDataBaseBalls: IBallData[];\n  rangeDataPowerBalls: IBallData[];\n  rangeDataDraws: IDrawData[];\n  //\n  rangeDataOldest: number; // Milliseconds.\n  rangeDataNewest: number; // Milliseconds.\n}\n\nexport interface IReduxCombinationsState {\n  combinationsData: IComboData[];\n  combinationsIsCalculating: boolean;\n}\n\nexport interface IReduxSelectState {\n  currentBalls: number[];\n}\n\nexport interface IReduxCompleteState {\n  lottoData: IReduxLottoDataState;\n  rangeData: IReduxRangeDataState;\n  combinations: IReduxCombinationsState;\n  select: IReduxSelectState;\n}\n\nexport enum EReduxActions {\n  LOTTO_DATA_FETCH = \"LOTTO_DATA_FETCH\",\n  LOTTO_DATA_SAVE_ALL = \"LOTTO_DATA_SAVE_ALL\",\n  //\n  RANGE_DATA_UPDATE = \"RANGE_DATA_UPDATE\",\n  //\n  SELECT_TOGGLE = \"SELECT_TOGGLE\",\n  SELECT_CLEAR = \"SELECT_CLEAR\",\n  //\n  COMBINATIONS_CALCULATE = \"COMBINATIONS_CALCULATE\",\n  COMBINATIONS_UPDATE = \"COMBINATIONS_UPDATE\"\n}\n\nexport type TBallFrequency = [\n  number, // Ball.\n  number, // Frequency.\n  string //  Color.\n];\n\nexport interface IBallData {\n  title: string;\n  frequencies: TBallFrequency[];\n}\n\nexport interface ILottoDataCsv {\n  1: string;\n  2: string;\n  3: string;\n  4: string;\n  5: string;\n  6: string;\n  Draw: string;\n  \"Bonus Ball\": string;\n  \"2nd Bonus Ball\": string;\n  \"Power Ball\": string;\n  \"Draw Date\": string;\n}\n\nexport interface ILottoDataJson {\n  position1: number;\n  position2: number;\n  position3: number;\n  position4: number;\n  position5: number;\n  position6: number;\n  bonusBall1: number;\n  bonusBall2: number;\n  powerBall: number;\n  drawNum: number;\n  drawDate: string;\n  drawTime: number;\n}\n\nexport enum ELottoJsonKeys {\n  position1 = \"position1\",\n  position2 = \"position2\",\n  position3 = \"position3\",\n  position4 = \"position4\",\n  position5 = \"position5\",\n  position6 = \"position6\",\n  bonusBall1 = \"bonusBall1\",\n  bonusBall2 = \"bonusBall2\",\n  powerBall = \"powerBall\",\n  drawNum = \"drawNum\",\n  drawDate = \"drawDate\",\n  drawTime = \"drawTime\"\n}\n\nexport interface ICombinations {\n  balls: [\n    number, // Ball.\n    string // Color.\n  ][];\n  frequency: number;\n}\n\nexport interface IComboData {\n  title: string;\n  combinations: ICombinations[];\n}\n\nexport interface IDrawItem {\n  drawNum: number;\n  balls: [\n    number, // Ball.\n    string // Color.\n  ][];\n}\n\nexport interface IDrawData {\n  title: string;\n  draws: IDrawItem[];\n}\n","import {\n  IReduxSelectState as IState,\n  EReduxActions as actions\n} from \"../../types\";\n\ninterface IAction {\n  type: actions.SELECT_TOGGLE | actions.SELECT_CLEAR;\n  payload: number;\n}\n\nconst initialState = {\n  currentBalls: []\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.SELECT_TOGGLE: {\n      const prevBalls = state.currentBalls;\n      const toggledBall = action.payload;\n      const isAlreadyActive = prevBalls.includes(toggledBall);\n      const nextBalls = isAlreadyActive\n        ? prevBalls.filter(prevItem => prevItem !== toggledBall)\n        : [...prevBalls, toggledBall];\n\n      return {\n        ...state,\n        currentBalls: nextBalls\n      };\n    }\n    case actions.SELECT_CLEAR: {\n      return {\n        ...state,\n        currentBalls: []\n      };\n    }\n    default:\n      return state;\n  }\n}\n","export const colors = {\n  // Balls.\n  ballPurple: \"#6200EA\",\n  ballRed: \"#E53935\",\n  ballGreen: \"#00BFA5\",\n  ballOrange: \"#FF6D00\",\n  ballBlue: \"#2962FF\",\n  // Background.\n  bgDark: \"#001529\",\n  bgLight: \"#f0f2f5\"\n};\n\nexport const dateFormat = \"YYYY/MM/DD\";\n","import React from \"react\";\nimport { notification, Progress } from \"antd\";\nimport axios from \"axios\";\nimport csvToJson from \"csvtojson\";\nimport throttle from \"lodash.throttle\";\nimport {\n  TBallFrequency,\n  IBallData,\n  ILottoDataCsv,\n  ILottoDataJson,\n  ELottoJsonKeys,\n  IComboData,\n  IDrawItem,\n  IDrawData\n} from \"./types\";\nimport { colors } from \"./statics\";\n\nexport const fetchCsvData = () =>\n  axios({\n    method: \"get\",\n    url: \"lotto-numbers.csv\"\n  });\n\nexport const createArrayOfLength = (length: number) =>\n  new Array(length).fill(0);\n\nexport const getTimeNow = () => new Date().getTime();\n\nexport const createListFromTo = (from: number, to: number): number[] =>\n  new Array(to - from + 1).fill(0).map((_, index) => from + index);\n\nexport const getBallColor = (ball: number): string => {\n  switch (true) {\n    case ball >= 40:\n      return colors.ballPurple;\n    case ball >= 30:\n      return colors.ballRed;\n    case ball >= 20:\n      return colors.ballGreen;\n    case ball >= 10:\n      return colors.ballOrange;\n    default:\n      return colors.ballBlue;\n  }\n};\n\nexport const getFrequencies = (\n  json: ILottoDataJson[],\n  columns: ELottoJsonKeys[],\n  max: number,\n  createColor: (ball: number) => string\n): TBallFrequency[] => {\n  const shell = new Array(max)\n    .fill(0)\n    .reduce((acc, _, index) => ({ ...acc, [`${index + 1}`]: 0 }), {});\n\n  const frequencies = json.reduce((accFreq, row) => {\n    return columns.reduce((accCol, column) => {\n      const ball = row[column];\n      return {\n        ...accCol,\n        [ball]: accCol[ball] + 1\n      };\n    }, accFreq);\n  }, shell);\n\n  return Object.entries(frequencies)\n    .sort(([, frequencyA], [, frequencyB]) =>\n      frequencyA > frequencyB ? -1 : 1\n    )\n    .map(\n      ([ball, frequency]): TBallFrequency => [\n        +ball,\n        +frequency,\n        createColor(+ball)\n      ]\n    );\n};\n\nexport const sliceItemsByTime = (\n  json: ILottoDataJson[],\n  rangeDataOldest: number,\n  rangeDataNewest: number\n): ILottoDataJson[] =>\n  json.filter(\n    ({ drawTime }) => drawTime >= rangeDataOldest && drawTime <= rangeDataNewest\n  );\n\nexport const enrichJsonData = (csvJson: ILottoDataCsv[]): ILottoDataJson[] =>\n  csvJson.map(\n    ({\n      1: position1, //                 \"33\"\n      2: position2, //                 \"15\"\n      3: position3, //                 \"11\"\n      4: position4, //                 \"2\"\n      5: position5, //                 \"35\"\n      6: position6, //                 \"10\"\n      Draw: drawNum, //                \"1816\"\n      \"Bonus Ball\": bonusBall1, //     \"5\"\n      \"2nd Bonus Ball\": bonusBall2, // \"\"\n      \"Power Ball\": powerBall, //      \"8\"\n      \"Draw Date\": drawDate //         \"Saturday 29 December 2018\"\n    }) => ({\n      position1: +position1,\n      position2: +position2,\n      position3: +position3,\n      position4: +position4,\n      position5: +position5,\n      position6: +position6,\n      bonusBall1: +bonusBall1,\n      bonusBall2: +bonusBall2,\n      powerBall: +powerBall,\n      drawNum: +drawNum,\n      drawDate,\n      drawTime: new Date(drawDate).getTime()\n    })\n  );\n\nexport const convertLottoCsvDataToJson = async (\n  rawCsvData: string\n): Promise<ILottoDataJson[]> => {\n  const csvJson = await csvToJson().fromString(rawCsvData);\n\n  return enrichJsonData(csvJson);\n};\n\nexport const extractDateBoundsFromLottoData = (\n  lottoData: ILottoDataJson[]\n) => ({\n  oldest: lottoData.slice(-1)[0].drawTime,\n  newest: lottoData[0].drawTime\n});\n\nexport const extractRangeDataFromLottoData = (\n  jsonAll: ILottoDataJson[],\n  rangeDataOldest: number,\n  rangeDataNewest: number\n): {\n  rangeData: ILottoDataJson[];\n  baseBalls: IBallData[];\n  powerBalls: IBallData[];\n  rangeDataDraws: IDrawData[];\n} => {\n  const rangeData = sliceItemsByTime(jsonAll, rangeDataOldest, rangeDataNewest);\n  const rangeDataDraws = createDrawData(rangeData);\n  const {\n    position1,\n    position2,\n    position3,\n    position4,\n    position5,\n    position6,\n    bonusBall1,\n    powerBall\n  } = ELottoJsonKeys;\n  // prettier-ignore\n  const baseBalls = [\n    {title: 'Most Frequent', frequencies: getFrequencies(rangeData, [position1, position1, position2, position3, position4, position5, position6, bonusBall1], 40, getBallColor) },\n    {title: 'Ball One', frequencies: getFrequencies(rangeData, [position1], 40, getBallColor) },\n    {title: 'Ball Two', frequencies: getFrequencies(rangeData, [position2], 40, getBallColor) },\n    {title: 'Ball Three', frequencies: getFrequencies(rangeData, [position3], 40, getBallColor) },\n    {title: 'Ball Four', frequencies: getFrequencies(rangeData, [position4], 40, getBallColor) },\n    {title: 'Ball Five', frequencies: getFrequencies(rangeData, [position5], 40, getBallColor) },\n    {title: 'Ball Six', frequencies: getFrequencies(rangeData, [position6], 40, getBallColor) },\n    {title: 'Bonus Ball', frequencies: getFrequencies(rangeData, [bonusBall1], 40, getBallColor) },\n  ];\n  // prettier-ignore\n  const powerBalls = [\n    {title: 'Power Ball', frequencies: getFrequencies(rangeData, [powerBall], 10, () => 'blue') }\n  ];\n\n  return {\n    rangeData,\n    baseBalls,\n    powerBalls,\n    rangeDataDraws\n  };\n};\n\nexport const enrichCombinationsWithColor = (\n  combinationsData: IComboData[]\n): IComboData[] =>\n  combinationsData.map(({ title, combinations }) => ({\n    title,\n    combinations: combinations.map(({ frequency, balls }) => ({\n      frequency,\n      balls: balls.map(([ball]): [number, string] => [ball, getBallColor(ball)])\n    }))\n  }));\n\nconst createDrawItem = ({\n  position1,\n  position2,\n  position3,\n  position4,\n  position5,\n  position6,\n  bonusBall1,\n  powerBall,\n  drawNum\n}: ILottoDataJson): IDrawItem => ({\n  drawNum,\n  balls: [\n    [position1, getBallColor(position1)],\n    [position2, getBallColor(position2)],\n    [position3, getBallColor(position3)],\n    [position4, getBallColor(position4)],\n    [position5, getBallColor(position5)],\n    [position6, getBallColor(position6)],\n    [bonusBall1, getBallColor(bonusBall1)],\n    [powerBall, \"blue\"]\n  ]\n});\n\ninterface IDrawShell {\n  segments: IDrawData[];\n  segment: IDrawData;\n}\n\nexport const createDrawData = (table: ILottoDataJson[]): IDrawData[] => {\n  const itemsPerCard = 50;\n  const shell = {\n    segments: [],\n    segment: { title: \"\", draws: [] }\n  };\n\n  const { segments } = table.reduce(\n    (acc, row, index) => {\n      const increment = index + 1;\n      const { segments, segment } = acc;\n      const { draws } = segment;\n      const { drawNum } = row;\n      const totalDraws = draws.length;\n      const isFull = totalDraws > itemsPerCard || increment === table.length;\n\n      if (isFull) {\n        segments.push({\n          title: `Draw ${drawNum + 1 + (totalDraws - 1)} to ${drawNum + 1}`,\n          draws\n        });\n        segment.draws = [createDrawItem(row)];\n      } else {\n        segment.draws.push(createDrawItem(row));\n      }\n\n      return { segments, segment };\n    },\n    shell as IDrawShell\n  );\n\n  return segments;\n};\n\nconst updateCombinationsNotification = (\n  progress: number,\n  duration: number = 0 // Seconds.\n) => {\n  notification.open({\n    key: \"combinationsWorker\",\n    message: \"Calculating Lotto Ball Combinations\",\n    description: <Progress percent={progress} status=\"active\" />,\n    duration\n  });\n};\n\nexport const createCombinationsWorkerSequence = (\n  rangeDataAll: ILottoDataJson[]\n) => {\n  updateCombinationsNotification(0);\n  const worker = new Worker(\"worker.js\");\n  const throttled = throttle(updateCombinationsNotification, 500);\n  const calculation = new Promise(resolve => {\n    worker.onmessage = event => {\n      const { isComplete, combinations, progress } = event.data;\n      if (isComplete) {\n        throttled.cancel();\n        updateCombinationsNotification(100, 0.1);\n        resolve(enrichCombinationsWithColor(combinations));\n      } else {\n        throttled(progress);\n      }\n    };\n  });\n\n  worker.postMessage(rangeDataAll);\n  return calculation;\n};\n\nexport const createErrorNotification = (\n  message: string = \"Error!\",\n  description: string = \"Sorry, there has been an error. Please retry again.\"\n) => {\n  notification.error({ message, description });\n};\n","import {\n  IReduxLottoDataState as IState,\n  EReduxActions as actions,\n  ILottoDataJson\n} from \"../../types\";\nimport { extractDateBoundsFromLottoData } from \"../../helpers\";\n\ninterface IAction {\n  type: actions.LOTTO_DATA_SAVE_ALL;\n  payload: ILottoDataJson[];\n}\n\nconst initialState = {\n  lottoDataAll: [],\n  lottoDataTotalItems: 0,\n  //\n  lottoDataOldestDate: 0,\n  lottoDataNewestDate: 0,\n  //\n  lottoDataIsFetching: true\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.LOTTO_DATA_SAVE_ALL: {\n      const lottoDataAll = action.payload;\n      const {\n        oldest: lottoDataOldestDate,\n        newest: lottoDataNewestDate\n      } = extractDateBoundsFromLottoData(lottoDataAll);\n      return {\n        ...state,\n        lottoDataAll,\n        lottoDataTotalItems: lottoDataAll.length,\n        lottoDataOldestDate,\n        lottoDataNewestDate,\n        lottoDataIsFetching: false\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  IReduxRangeDataState as IState,\n  EReduxActions as actions,\n  ILottoDataJson\n} from \"../../types\";\nimport { extractRangeDataFromLottoData } from \"../../helpers\";\n\ninterface IAction {\n  type: actions.RANGE_DATA_UPDATE;\n  payload: {\n    lottoDataAll: ILottoDataJson[];\n    rangeDataOldest: number; // Milliseconds.\n    rangeDataNewest: number; // Milliseconds.\n  };\n}\n\nconst initialState = {\n  rangeDataAll: [],\n  rangeDataTotalItems: 0,\n  //\n  rangeDataBaseBalls: [],\n  rangeDataPowerBalls: [],\n  rangeDataDraws: [],\n  //\n  rangeDataOldest: 0,\n  rangeDataNewest: 0\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.RANGE_DATA_UPDATE: {\n      const { lottoDataAll, rangeDataOldest, rangeDataNewest } = action.payload;\n      const {\n        rangeData: rangeDataAll,\n        baseBalls: rangeDataBaseBalls,\n        powerBalls: rangeDataPowerBalls,\n        rangeDataDraws: rangeDataDraws\n      } = extractRangeDataFromLottoData(\n        lottoDataAll,\n        rangeDataOldest,\n        rangeDataNewest\n      );\n\n      return {\n        ...state,\n        rangeDataAll,\n        rangeDataTotalItems: rangeDataAll.length,\n        //\n        rangeDataOldest,\n        rangeDataNewest,\n        //\n        rangeDataBaseBalls,\n        rangeDataPowerBalls,\n        rangeDataDraws\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  IReduxCombinationsState as IState,\n  EReduxActions as actions,\n  IComboData\n} from \"../../types\";\n\ninterface IAction {\n  type: actions.COMBINATIONS_UPDATE | actions.COMBINATIONS_CALCULATE;\n  payload: IComboData[];\n}\n\nconst initialState = {\n  combinationsData: [],\n  combinationsIsCalculating: true\n};\n\nexport default function(state: IState = initialState, action: IAction) {\n  switch (action.type) {\n    case actions.COMBINATIONS_UPDATE: {\n      return {\n        ...state,\n        combinationsData: action.payload,\n        combinationsIsCalculating: false\n      };\n    }\n    case actions.COMBINATIONS_CALCULATE: {\n      return {\n        ...state,\n        combinationsIsCalculating: true\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport select from \"./select\";\nimport lottoData from \"./lottoData\";\nimport rangeData from \"./rangeData\";\nimport combinations from \"./combinations\";\n\nexport default combineReducers({\n  lottoData,\n  rangeData,\n  combinations,\n  select\n});\n","import { EReduxActions as actions, ILottoDataJson, IComboData } from \"../types\";\n\nexport const lottoDataFetch = () => ({\n  type: actions.LOTTO_DATA_FETCH\n});\n\nexport const lottoDataSaveAll = (lottoDataAll: ILottoDataJson[]) => ({\n  type: actions.LOTTO_DATA_SAVE_ALL,\n  payload: lottoDataAll\n});\n\nexport const rangeDataUpdateBase = ({\n  lottoDataAll,\n  rangeDataOldest,\n  rangeDataNewest\n}: {\n  lottoDataAll: ILottoDataJson[];\n  rangeDataOldest: number;\n  rangeDataNewest: number;\n}) => ({\n  type: actions.RANGE_DATA_UPDATE,\n  payload: { lottoDataAll, rangeDataOldest, rangeDataNewest }\n});\n\nexport const combinationsCalculate = () => ({\n  type: actions.COMBINATIONS_CALCULATE\n});\n\nexport const combinationsUpdate = (combinationsData: IComboData[]) => ({\n  type: actions.COMBINATIONS_UPDATE,\n  payload: combinationsData\n});\n\nexport const selectToggle = (ballNum: number) => ({\n  type: actions.SELECT_TOGGLE,\n  payload: ballNum\n});\n\nexport const selectClear = () => ({\n  type: actions.SELECT_CLEAR\n});\n","import { call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { EReduxActions as actions } from \"../types\";\nimport {\n  fetchCsvData,\n  convertLottoCsvDataToJson,\n  createCombinationsWorkerSequence,\n  createErrorNotification\n} from \"../helpers\";\nimport {\n  lottoDataSaveAll,\n  rangeDataUpdateBase,\n  combinationsCalculate,\n  combinationsUpdate\n} from \"./actions\";\n\nfunction* lottoDataAllFetchSaga(action: {}) {\n  try {\n    const response = yield call(fetchCsvData);\n    const lottoDataAll = yield convertLottoCsvDataToJson(response.data);\n\n    yield put(lottoDataSaveAll(lottoDataAll));\n    const {\n      lottoData: { lottoDataNewestDate }\n    } = yield select();\n    yield put(\n      rangeDataUpdateBase({\n        lottoDataAll,\n        rangeDataOldest: new Date(\"01/06/2018\").getTime(),\n        rangeDataNewest: lottoDataNewestDate\n      })\n    );\n    const {\n      rangeData: { rangeDataAll }\n    } = yield select();\n    yield put(combinationsCalculate());\n  } catch (error) {\n    createErrorNotification();\n  }\n}\n\nfunction* combinationsCalculateSaga() {\n  try {\n    const {\n      rangeData: { rangeDataAll }\n    } = yield select();\n    const response = yield createCombinationsWorkerSequence(rangeDataAll);\n    yield put(combinationsUpdate(response));\n  } catch (error) {\n    createErrorNotification();\n  }\n}\n\nfunction* sagas() {\n  yield takeLatest(actions.LOTTO_DATA_FETCH, lottoDataAllFetchSaga);\n  yield takeLatest(actions.COMBINATIONS_CALCULATE, combinationsCalculateSaga);\n}\n\nexport default sagas;\n","import React from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(sagas);\n\nexport default store;\n","import React, { PureComponent } from \"react\";\nimport { Tag } from \"antd\";\n\ninterface IState {}\n\ninterface IProps {\n  style?: {\n    [key: string]: string | number;\n  };\n  ball: number;\n  color: string;\n  handleClick?: (ball: number) => void;\n}\n\nclass Ball extends PureComponent<IProps, IState> {\n  handleClick = () => {\n    const { ball, handleClick } = this.props;\n    handleClick && handleClick(ball);\n  };\n\n  render() {\n    const { ball, color, handleClick } = this.props;\n    return (\n      <Tag\n        color={color}\n        style={{\n          margin: \"4px\",\n          minWidth: \"40px\",\n          textAlign: \"center\",\n          pointerEvents: handleClick ? \"initial\" : \"none\"\n        }}\n        onClick={this.handleClick}\n      >\n        {ball}\n      </Tag>\n    );\n  }\n}\n\nexport default Ball;\n","import React, { SFC } from \"react\";\nimport { Card, Button, Icon } from \"antd\";\nimport { createListFromTo, getBallColor } from \"./helpers\";\nimport Ball from \"./Ball\";\n\ninterface ISelect {\n  handleToggle: (ball: number) => void;\n  handleClear?: () => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst optionsList = [\n  createListFromTo(1, 9),\n  createListFromTo(10, 19),\n  createListFromTo(20, 29),\n  createListFromTo(30, 39),\n  [40]\n];\n\nconst Select: SFC<ISelect> = ({ handleToggle, handleClear, checkIsActive }) => (\n  <Card title=\"Selection\" style={{ height: \"100%\" }}>\n    {handleClear && (\n      <Button\n        type=\"default\"\n        icon=\"close\"\n        size=\"small\"\n        onClick={handleClear}\n        style={{\n          position: \"absolute\",\n          right: \"16px\",\n          top: \"16px\"\n        }}\n      >\n        Clear\n      </Button>\n    )}\n    {optionsList.map(balls => (\n      <div key={balls.join(\",\")}>\n        {balls.map(ball => (\n          <span\n            key={ball}\n            style={{\n              opacity: checkIsActive(ball) ? 1 : 0.2,\n              display: \"inline-block\"\n            }}\n          >\n            <Ball\n              ball={ball}\n              color={getBallColor(ball)}\n              handleClick={() => handleToggle(ball)}\n            />\n          </span>\n        ))}\n      </div>\n    ))}\n  </Card>\n);\n\nexport default Select;\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { createArrayOfLength } from \"./helpers\";\n\ninterface IBlobProps {\n  isInline?: boolean;\n  style?: {\n    [key: string]: number | string;\n  };\n}\n\nconst SkeletonBlob: SFC<IBlobProps> = ({ style, isInline }) => (\n  <div\n    className=\"ant-skeleton ant-skeleton-active\"\n    style={{ display: isInline ? \"inline-block\" : \"block\", width: \"auto\" }}\n  >\n    <span className=\"ant-skeleton-content\" style={{ display: \"block\" }}>\n      <span\n        className=\"ant-skeleton-title\"\n        style={{\n          height: \"20px\",\n          margin: 0,\n          display: \"block\",\n          width: \"100%\",\n          ...style\n        }}\n      />\n    </span>\n  </div>\n);\n\nexport const SkeletonInput: SFC<{}> = () => (\n  <SkeletonBlob\n    style={{\n      height: \"40px\"\n    }}\n  />\n);\n\ninterface ICardProps {\n  totalRows: number;\n  totalCells: number;\n}\n\nexport const SkeletonCard: SFC<ICardProps> = ({ totalRows, totalCells }) => (\n  <Card title={<SkeletonBlob style={{ maxWidth: \"120px\" }} />}>\n    {createArrayOfLength(totalRows).map((_, rowIndex) => (\n      <div\n        key={rowIndex}\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-start\"\n        }}\n      >\n        {createArrayOfLength(totalCells).map((_, cellIndex) => (\n          <SkeletonBlob\n            key={`${rowIndex},${cellIndex}`}\n            isInline\n            style={{\n              margin: \"5px 5px 5px 0\",\n              width: \"42px\"\n            }}\n          />\n        ))}\n      </div>\n    ))}\n  </Card>\n);\n\nexport const SkeletonBaseBalls: SFC<{}> = () => (\n  <SkeletonCard totalRows={40} totalCells={1} />\n);\n\nexport const SkeletonCombinations: SFC<{}> = () => (\n  <SkeletonCard totalRows={10} totalCells={4} />\n);\n\nexport const SkeletonPowerBalls: SFC<{}> = () => (\n  <SkeletonCard totalRows={10} totalCells={4} />\n);\n\nexport const SkeletonDraws: SFC<{}> = () => (\n  <SkeletonCard totalRows={50} totalCells={8} />\n);\n\nexport default SkeletonBlob;\n","import React, { Fragment, SFC } from \"react\";\nimport moize from \"moize\";\nimport moment from \"moment\";\nimport { Card, DatePicker, Alert, Spin } from \"antd\";\nimport { dateFormat } from \"./statics\";\nimport { SkeletonInput } from \".//Skeleton\";\n\ninterface ITime {\n  absoluteOldestDate: number;\n  absoluteNewestDate: number;\n  currentOldestDate: number;\n  currentNewestDate: number;\n  handleChange: (_: any, fromToStrings: [string, string]) => void;\n  totalCurrentDraws: number;\n  totalPossibleDraws: number;\n  isLoading: boolean;\n}\n\nconst Time: SFC<ITime> = ({\n  absoluteOldestDate,\n  absoluteNewestDate,\n  currentOldestDate,\n  currentNewestDate,\n  handleChange,\n  totalCurrentDraws,\n  totalPossibleDraws,\n  isLoading\n}) => (\n  <Card title=\"Time\" style={{ height: \"100%\" }}>\n    <div style={{ maxWidth: \"560px\" }}>\n      {isLoading || (!currentOldestDate || !currentNewestDate) ? (\n        <SkeletonInput />\n      ) : (\n        <Fragment>\n          <DatePicker.RangePicker\n            style={{ width: \"100%\" }}\n            size=\"large\"\n            defaultValue={[\n              moment(new Date(currentOldestDate)),\n              moment(new Date(currentNewestDate))\n            ]}\n            format={dateFormat}\n            onChange={handleChange}\n          />\n          <Alert\n            style={{ margin: \"18px 0 0\" }}\n            type=\"info\"\n            showIcon\n            message={\n              <span>\n                Showing <strong>{totalCurrentDraws}</strong> from a possible{\" \"}\n                <strong>{totalPossibleDraws}</strong> draws.\n              </span>\n            }\n          />\n          {currentOldestDate < absoluteOldestDate && (\n            <Alert\n              style={{ margin: \"18px 0 0\" }}\n              type=\"warning\"\n              showIcon\n              message={\n                <span>\n                  The <strong>oldest</strong> <em>Lotto draw</em> record is{\" \"}\n                  <strong>\n                    {moment(new Date(absoluteOldestDate)).format(dateFormat)}\n                  </strong>\n                  .\n                </span>\n              }\n            />\n          )}\n          {currentNewestDate > absoluteNewestDate && (\n            <Alert\n              style={{ margin: \"18px 0 0\" }}\n              type=\"warning\"\n              showIcon\n              message={\n                <span>\n                  The <strong>latest</strong> <em>Lotto draw</em> record is{\" \"}\n                  <strong>\n                    {moment(new Date(absoluteNewestDate)).format(dateFormat)}\n                  </strong>\n                  .\n                </span>\n              }\n            />\n          )}\n        </Fragment>\n      )}\n    </div>\n  </Card>\n);\n\nexport default moize.reactSimple(Time);\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { IBallData } from \"./types\";\nimport Ball from \"./Ball\";\n\ninterface IStatistic {\n  title: IBallData[\"title\"];\n  frequencies: IBallData[\"frequencies\"];\n  handleToggle?: (ball: number) => void;\n  checkIsActive?: (ball: number) => boolean;\n}\n\nconst Statistic: SFC<IStatistic> = ({\n  title,\n  frequencies,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card title={title}>\n    {frequencies.map(\n      ([ball, frequency, color]) =>\n        Boolean(ball) && (\n          <div\n            key={ball}\n            style={{\n              opacity: !checkIsActive || checkIsActive(ball) ? 1 : 0.2\n            }}\n          >\n            <Ball ball={ball} color={color} handleClick={handleToggle} />x\n            {frequency}\n          </div>\n        )\n    )}\n  </Card>\n);\n\nexport default Statistic;\n","import React, { SFC } from \"react\";\nimport { Card } from \"antd\";\nimport { IDrawData } from \"./types\";\nimport Ball from \"./Ball\";\n\ninterface IDraw extends IDrawData {\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Draw: SFC<IDraw> = ({ title, draws, handleToggle, checkIsActive }) => (\n  <Card title={title}>\n    {draws.map(({ drawNum, balls }) => (\n      <div key={drawNum}>\n        <span style={{ display: \"inline-block\", minWidth: \"50px\" }}>\n          #{drawNum}\n        </span>\n        {balls.map(([ball, color], index) =>\n          Boolean(ball) && index === 7 ? (\n            <Ball key=\"bonus\" ball={ball} color={color} />\n          ) : (\n            <span\n              key={ball}\n              style={{\n                opacity: checkIsActive(ball) ? 1 : 0.2\n              }}\n            >\n              <Ball ball={ball} color={color} handleClick={handleToggle} />\n            </span>\n          )\n        )}\n      </div>\n    ))}\n  </Card>\n);\n\nexport default Draw;\n","import React, { SFC, Fragment } from \"react\";\nimport { Card } from \"antd\";\nimport { IComboData } from \"./types\";\nimport Ball from \"./Ball\";\n\ninterface ICombinations {\n  title: string;\n  combinations: IComboData[\"combinations\"];\n  handleToggle: (ball: number) => void;\n  checkIsActive: (ball: number) => boolean;\n}\n\nconst Combinations: SFC<ICombinations> = ({\n  title,\n  combinations,\n  handleToggle,\n  checkIsActive\n}) => (\n  <Card title={title}>\n    {combinations.map(({ balls, frequency }) => (\n      <div key={balls.join(\",\")}>\n        {balls.map(([ball, color]) => (\n          <span\n            key={ball}\n            style={{\n              opacity: checkIsActive(ball) ? 1 : 0.2\n            }}\n          >\n            <Ball ball={ball} color={color} handleClick={handleToggle} />\n          </span>\n        ))}\n        x{frequency}\n      </div>\n    ))}\n  </Card>\n);\n\nexport default Combinations;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { Row, Col } from \"antd\";\nimport {\n  IReduxCompleteState,\n  IReduxLottoDataState,\n  IReduxRangeDataState,\n  IReduxCombinationsState,\n  IReduxSelectState,\n  IBallData,\n  ILottoDataJson,\n  IComboData,\n  IDrawData\n} from \"./types\";\nimport {\n  lottoDataFetch,\n  rangeDataUpdateBase,\n  selectToggle,\n  selectClear,\n  combinationsCalculate\n} from \"./redux/actions\";\nimport { createArrayOfLength } from \"./helpers\";\nimport { colors, dateFormat } from \"./statics\";\nimport Select from \"./Select\";\nimport Time from \"./Time\";\nimport Statistic from \"./Statistic\";\nimport Draw from \"./Draw\";\nimport Combinations from \"./Combinations\";\nimport {\n  SkeletonBaseBalls,\n  SkeletonCombinations,\n  SkeletonPowerBalls,\n  SkeletonDraws\n} from \"./Skeleton\";\n\ninterface IAppState {}\n\ninterface IMapStateToProps\n  extends IReduxLottoDataState,\n    IReduxRangeDataState,\n    IReduxCombinationsState,\n    IReduxSelectState {}\n\ninterface IMapDispatchToProps {\n  lottoDataFetch: () => void;\n  rangeDataUpdateBase: (\n    args: {\n      lottoDataAll: ILottoDataJson[];\n      rangeDataOldest: number;\n      rangeDataNewest: number;\n    }\n  ) => void;\n  selectToggle: (ballNum: number) => void;\n  selectClear: () => void;\n  combinationsCalculate: () => void;\n}\n\ninterface IAppProps extends IMapStateToProps, IMapDispatchToProps {}\n\nclass App extends Component<IAppProps, IAppState> {\n  state: IAppState = {};\n\n  constructor(props: IAppProps) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.lottoDataFetch();\n  }\n\n  checkIsCurrentBallActive = (ball: number): boolean => {\n    const { currentBalls } = this.props;\n    const isEmpty = !currentBalls.length;\n    const isActive = currentBalls.includes(ball);\n\n    return isEmpty || isActive;\n  };\n\n  updateFromToDates = (\n    _: any,\n    [oldestString, newestString]: [string, string]\n  ) => {\n    this.props.rangeDataUpdateBase({\n      lottoDataAll: this.props.lottoDataAll,\n      rangeDataOldest: moment(oldestString, dateFormat).valueOf(),\n      rangeDataNewest: moment(newestString, dateFormat).valueOf()\n    });\n    this.props.combinationsCalculate();\n  };\n\n  render() {\n    const {\n      lottoDataTotalItems,\n      lottoDataOldestDate,\n      lottoDataNewestDate,\n      lottoDataIsFetching,\n      //\n      rangeDataTotalItems,\n      rangeDataBaseBalls,\n      rangeDataPowerBalls,\n      rangeDataDraws,\n      rangeDataOldest,\n      rangeDataNewest,\n      //\n      currentBalls,\n      //\n      selectToggle,\n      selectClear,\n      //\n      combinationsData,\n      combinationsIsCalculating\n    } = this.props;\n    return (\n      <div style={{ background: colors.bgLight, minHeight: \"100vh\" }}>\n        <div\n          style={{\n            background: colors.bgDark,\n            padding: \"8px 16px\"\n          }}\n        >\n          <h1 style={{ color: \"white\", margin: 0 }}>Lotto Settings</h1>\n          <Row type=\"flex\" gutter={16}>\n            <Col span={24} xs={24} lg={24} xxl={12} style={{ margin: \"8px 0\" }}>\n              <Select\n                handleToggle={selectToggle}\n                checkIsActive={this.checkIsCurrentBallActive}\n                handleClear={\n                  Boolean(currentBalls.length) ? selectClear : undefined\n                }\n              />\n            </Col>\n\n            <Col span={24} xs={24} lg={24} xxl={12} style={{ margin: \"8px 0\" }}>\n              <Time\n                absoluteOldestDate={lottoDataOldestDate}\n                absoluteNewestDate={lottoDataNewestDate}\n                currentOldestDate={rangeDataOldest}\n                currentNewestDate={rangeDataNewest}\n                handleChange={this.updateFromToDates}\n                totalCurrentDraws={rangeDataTotalItems}\n                totalPossibleDraws={lottoDataTotalItems}\n                isLoading={lottoDataIsFetching}\n              />\n            </Col>\n          </Row>\n        </div>\n\n        <div style={{ padding: \"16px\" }}>\n          <Row type=\"flex\" gutter={16}>\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Single Balls</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                Looking at each <em>Lotto Ball</em> in isolation. What ball{\" \"}\n                <strong>appeared the most</strong>? Where did each ball fall\n                during the <strong>draw order</strong>?\n              </p>\n            </Col>\n            {(lottoDataIsFetching\n              ? createArrayOfLength(8)\n              : rangeDataBaseBalls\n            ).map(({ title, frequencies }: IBallData, index) => (\n              <Col\n                key={title || index}\n                span={12}\n                xs={8}\n                lg={6}\n                xxl={3}\n                style={{ margin: \"8px 0\" }}\n              >\n                {lottoDataIsFetching ? (\n                  <SkeletonBaseBalls />\n                ) : (\n                  <Statistic\n                    title={title}\n                    frequencies={frequencies}\n                    handleToggle={selectToggle}\n                    checkIsActive={this.checkIsCurrentBallActive}\n                  />\n                )}\n              </Col>\n            ))}\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Balls Combinations</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                Finding similar <em>Lotto Ball</em> combinations between each\n                draw. We disregard <strong>ball order</strong> and instead{\" \"}\n                <strong>aggregate</strong> each combination match based on{\" \"}\n                <strong>ball values</strong>.\n              </p>\n            </Col>\n            {(lottoDataIsFetching\n              ? createArrayOfLength(3)\n              : combinationsData\n            ).map(({ title, combinations }: IComboData, index) => (\n              <Col\n                key={title || index}\n                span={24}\n                xs={24}\n                lg={12}\n                xxl={6}\n                style={{ margin: \"8px 0\" }}\n              >\n                {lottoDataIsFetching || combinationsIsCalculating ? (\n                  <SkeletonCombinations />\n                ) : (\n                  <Combinations\n                    title={title}\n                    combinations={combinations}\n                    handleToggle={selectToggle}\n                    checkIsActive={this.checkIsCurrentBallActive}\n                  />\n                )}\n              </Col>\n            ))}\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Power Ball</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                Show the most frequent appearing <em>Lotto Power Ball</em>. This\n                part of the draw has no affiliation to the{\" \"}\n                <strong>generic</strong> <em>Lotto Ball</em> references above.\n              </p>\n            </Col>\n            {(lottoDataIsFetching\n              ? createArrayOfLength(1)\n              : rangeDataPowerBalls\n            ).map(({ title, frequencies }: IBallData, index) => (\n              <Col\n                key={title || index}\n                span={12}\n                xs={8}\n                lg={6}\n                xxl={4}\n                style={{ margin: \"8px 0\" }}\n              >\n                {lottoDataIsFetching ? (\n                  <SkeletonPowerBalls />\n                ) : (\n                  <Statistic title={\"\"} frequencies={frequencies} />\n                )}\n              </Col>\n            ))}\n            <Col span={24} xs={24} style={{ margin: \"8px 0\" }}>\n              <h2>Draws</h2>\n              <p style={{ maxWidth: \"900px\" }}>\n                List the <em>Lotto Draws</em> in descending order{\" \"}\n                <em>\n                  (including <strong>Bonus</strong> and <strong>Power</strong>{\" \"}\n                  Balls)\n                </em>\n                .\n              </p>\n            </Col>\n            {(lottoDataIsFetching\n              ? createArrayOfLength(3)\n              : rangeDataDraws\n            ).map(({ title, draws }: IDrawData, index) => (\n              <Col\n                key={title || index}\n                span={24}\n                xs={24}\n                lg={12}\n                xxl={8}\n                style={{ margin: \"8px 0\" }}\n              >\n                {lottoDataIsFetching ? (\n                  <SkeletonDraws />\n                ) : (\n                  <Draw\n                    title={title}\n                    draws={draws}\n                    handleToggle={selectToggle}\n                    checkIsActive={this.checkIsCurrentBallActive}\n                  />\n                )}\n              </Col>\n            ))}\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IReduxCompleteState): IMapStateToProps => ({\n  ...state.lottoData,\n  ...state.rangeData,\n  ...state.combinations,\n  ...state.select\n});\n\n// const mapDispatchToProps = (dispatch: any): IMapDispatchToProps => ({\n//   lottoDataFetch: (...args) => dispatch(lottoDataFetch(...args)),\n//   selectToggle: (...args) => dispatch(selectToggle(...args)),\n//   selectClear: (...args) => dispatch(selectClear(...args))\n// });\n\nconst mapDispatchToProps = {\n  lottoDataFetch,\n  rangeDataUpdateBase,\n  selectToggle,\n  selectClear,\n  combinationsCalculate\n};\n\nexport default connect(\n  mapStateToProps, // as () => IMapStateToProps,\n  mapDispatchToProps // as () => IMapDispatchToProps\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}